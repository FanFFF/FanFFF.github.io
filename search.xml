<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序算法c++</title>
      <link href="/2020/04/17/%E5%BA%8F%E7%AE%97%E6%B3%95c/"/>
      <url>/2020/04/17/%E5%BA%8F%E7%AE%97%E6%B3%95c/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-30.png" alt="各算法对比"></p><h3 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h3><p>最简单的一种排序算法。假设长度为n的数组arr，要按照从小到大排序。则冒泡排序的具体过程可以描述为：首先从数组的第一个元素开始到数组最后一个元素为止，对数组中相邻的两个元素进行比较，如果位于数组左端的元素大于数组右端的元素，则交换这两个元素在数组中的位置，此时数组最右端的元素即为该数组中所有元素的最大值。接着对该数组剩下的n-1个元素进行冒泡排序，直到整个数组有序排列。算法的时间复杂度为O(n^2)。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 冒泡排序</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span>  i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp<span class="token punctuation">;</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h3><p>严蔚敏版《数据结构》中对选择排序的基本思想描述为：每一趟在n-i+1(i=1,2,…,n-1)个记录中选取关键字最小的记录作为有序序列中第i个记录。具体来说，假设长度为n的数组arr，要按照从小到大排序，那么先从n个数字中找到最小值min1，如果最小值min1的位置不在数组的最左端(也就是min1不等于arr[0])，则将最小值min1和arr[0]交换，接着在剩下的n-1个数字中找到最小值min2，如果最小值min2不等于arr[1]，则交换这两个数字，依次类推，直到数组arr有序排列。算法的时间复杂度为O(n^2)。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 选择排序</span><span class="token keyword">void</span> <span class="token function">SelectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                index <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> i<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp<span class="token punctuation">;</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h3><p> 插入排序的基本思想就是将无序序列插入到有序序列中。例如要将数组arr=[4,2,8,0,5,1]排序，可以将4看做是一个有序序列(图中用蓝色标出)，将[2,8,0,5,1]看做一个无序序列。无序序列中2比4小，于是将2插入到4的左边，此时有序序列变成了[2,4]，无序序列变成了[8,0,5,1]。无序序列中8比4大，于是将8插入到4的右边，有序序列变成了[2,4,8],无序序列变成了[0,5,1]。以此类推，最终数组按照从小到大排序。该算法的时间复杂度为O(n^2)。</p><p><img src="/images/pasted-32.png" alt="插入排序"></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 插入排序</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h3><p>希尔排序(Shell’s Sort)在插入排序算法的基础上进行了改进，算法的时间复杂度与前面几种算法相比有较大的改进。其算法的基本思想是：先将待排记录序列分割成为若干子序列分别进行插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行一次直接插入排序。</p><p><img src="/images/pasted-33.png" alt="希尔排序"></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 插入排序</span><span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> increasement <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 确定分组的增量</span>        increasement <span class="token operator">=</span> increasement <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> increasement<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> increasement<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> increasement<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> increasement<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> j <span class="token operator">-</span> increasement<span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">-</span><span class="token operator">=</span> increasement<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        arr<span class="token punctuation">[</span>k <span class="token operator">+</span> increasement<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    arr<span class="token punctuation">[</span>k <span class="token operator">+</span> increasement<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>increasement <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5、快速排序"><a href="#5、快速排序" class="headerlink" title="5、快速排序"></a>5、快速排序</h3><p>快速排序的基本思想是：通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，则可分别对这两部分记录继续进行排序，已达到整个序列有序。一趟快速排序的具体过程可描述为：从待排序列中任意选取一个记录(通常选取第一个记录)作为基准值，然后将记录中关键字比它小的记录都安置在它的位置之前，将记录中关键字比它大的记录都安置在它的位置之后。这样，以该基准值为分界线，将待排序列分成的两个子序列。</p><p>一趟快速排序的具体做法为：设置两个指针low和high分别指向待排序列的开始和结尾，记录下基准值baseval(待排序列的第一个记录)，然后先从high所指的位置向前搜索直到找到一个小于baseval的记录并互相交换，接着从low所指向的位置向后搜索直到找到一个大于baseval的记录并互相交换，重复这两个步骤直到low=high为止。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 快速排序</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 基准数</span>    <span class="token keyword">int</span> baseval <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从右向左找比基准数小的数</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> baseval<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从左向右找比基准数大的数</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> baseval<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把基准数放到i的位置</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> baseval<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 递归</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="6、归并排序"><a href="#6、归并排序" class="headerlink" title="6、归并排序"></a>6、归并排序</h3><p>“归并”的含义是将两个或两个以上的有序序列组合成一个新的有序表。假设初始序列含有n个记录，则可以看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到（表示不小于x的最小整数）个长度为2(或者是1)的有序子序列，再两两归并。如此重复，直到得到一个长度为n的有序序列为止。这种排序方法称为2-路归并排序。</p><p><img src="/images/pasted-34.png" alt="归并排序"></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 归并排序</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 合并两个有序序列</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示辅助空间有多少个元素</span>    <span class="token keyword">int</span> i_start <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> i_end <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">int</span> j_start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j_end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i_start <span class="token operator">&lt;=</span> i_end <span class="token operator">&amp;&amp;</span> j_start <span class="token operator">&lt;=</span> j_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i_start<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j_start<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i_start<span class="token punctuation">]</span><span class="token punctuation">;</span>             length<span class="token operator">++</span><span class="token punctuation">;</span>            i_start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j_start<span class="token punctuation">]</span><span class="token punctuation">;</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>            j_start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i_start <span class="token operator">&lt;=</span> i_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i_start<span class="token punctuation">]</span><span class="token punctuation">;</span>        i_start<span class="token operator">++</span><span class="token punctuation">;</span>        length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j_start <span class="token operator">&lt;=</span> j_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j_start<span class="token punctuation">]</span><span class="token punctuation">;</span>        length<span class="token operator">++</span><span class="token punctuation">;</span>        j_start<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把辅助空间的数据放到原空间</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>start <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7、堆排序"><a href="#7、堆排序" class="headerlink" title="7、堆排序"></a>7、堆排序</h3><p>堆的定义如下: n个元素的序列{k1, k2, … , kn}当且仅当满足一下条件时，称之为堆。</p><p><img src="/images/pasted-35.png" alt="条件">              </p><p>可以将堆看做是一个完全二叉树。并且，每个结点的值都大于等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于等于其左右孩子结点的值，称为小顶堆。</p><p>堆排序(Heap Sort)是利用堆进行排序的方法。其基本思想为：将待排序列构造成一个大顶堆(或小顶堆)，整个序列的最大值(或最小值)就是堆顶的根结点，将根节点的值和堆数组的末尾元素交换，此时末尾元素就是最大值(或最小值)，然后将剩余的n-1个序列重新构造成一个堆，这样就会得到n个元素中的次大值(或次小值)，如此反复执行，最终得到一个有序序列。</p><p><img src="/images/pasted-36.png" alt="堆排序"></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*    @param arr 待调整的数组    @param i 待调整的结点的下标    @param length 数组的长度*/</span><span class="token keyword">void</span> <span class="token function">HeapAdjust</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调整i位置的结点</span>    <span class="token comment" spellcheck="true">// 先保存当前结点的下标</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前结点左右孩子结点的下标</span>    <span class="token keyword">int</span> lchild <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rchild <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lchild <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> lchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rchild <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> rchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若i处的值比其左右孩子结点的值小，就将其和最大值进行交换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归</span>        <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 堆排序</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化堆</span>    <span class="token comment" spellcheck="true">// length / 2 - 1是二叉树中最后一个非叶子结点的序号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 交换堆顶元素和最后一个元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我想做个DOTA2的RPG（二）</title>
      <link href="/2019/12/31/%E5%81%9A%E4%B8%AADOTA2%E7%9A%84RPG%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/12/31/%E5%81%9A%E4%B8%AADOTA2%E7%9A%84RPG%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lua</title>
      <link href="/2019/12/03/lua/"/>
      <url>/2019/12/03/lua/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -- 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我想做个DOTA2的RPG（一）</title>
      <link href="/2019/12/01/%E6%83%B3%E5%81%9A%E4%B8%AADOTA2%E7%9A%84RPG/"/>
      <url>/2019/12/01/%E6%83%B3%E5%81%9A%E4%B8%AADOTA2%E7%9A%84RPG/</url>
      
        <content type="html"><![CDATA[<p><strong>制作一款属于你自己的游戏，不仅仅需要热情，还要坚持的毅力以及足够多的业余</strong><br>资料来源：<a href="http://www.dota2rpg.com" target="_blank" rel="noopener">http://www.dota2rpg.com</a><br>知乎专栏—DOTA2自定义游戏开发</p><h2 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h2><p>–名词解释：<br><strong>d2wt</strong>  —— Dota 2 Workshop Tools，也就是地图编辑所使用的工具<br><strong>addon</strong>、自定义地图、自定义游戏、MOD  —— 在本文中 大部分时候它们是同义词，代指地图<br><strong>Lua</strong>—— DOTA2地图所使用的简单编程脚本<br><strong>KV</strong>—— KeysValue 用于制作单位\物品\技能\英雄等游戏中所用基础数据，树状结构的数据表<br><strong>DOTA2安装目录</strong> —— 一般为“（Steam/完美客户端安装目录）/SteamApps/common/dota 2 beta”<br><strong>施工中的自定义地图存放目录</strong> —— 一般为“（Steam/完美客户端安装目录）\steamapps\common\dota 2 beta”</p><p>编辑器模块<br><strong>地形</strong>（其编辑工具名为“Hammer”）<br><strong>编码</strong>（分为KeyValue（简称KV）编辑和Lua代码两部分）<br><strong>模型</strong>（为地图导入自有的模型）<br><strong>声音</strong>（编辑已有或导入自有的声音）<br><strong>粒子</strong>（使用粒子编辑器（PET）以编辑已有或自建全新的粒子特效）<br><strong>自定义用户界面</strong>（创建Adobe Flash文件以扩展或修改已有的DotA2用户界面）</p><h2 id="操作手册"><a href="#操作手册" class="headerlink" title="操作手册"></a>操作手册</h2><h3 id="地图地形开发"><a href="#地图地形开发" class="headerlink" title="地图地形开发"></a>地图地形开发</h3><p>目录：Steam\steamapps\common\dota 2beta\dota_ugc\content\dota_addons\test<br>文件夹包含了这个项目的地图，材质贴图，模型，UI，源码等等。<br>打开Hammer→file→new<br><img src="/images/pasted-18.png" alt="Asset Browset资源管理器工具栏"><br>Hammer    ——地图编辑器<br>MaterialEditor tool    ——材质编辑器<br>ModelEditor tool      ——模型编辑器<br>ParticleEditor tool    ——粒子编辑器</p><p>界面键鼠操作说明：<br>鼠标右键是扭头转视角，鼠标滚轮滚动拉近/拉远视角，ALT+鼠标左键是以你点击的点为中心旋转，ALT+鼠标右键也是拉近缩短视角，不过比滚轮平滑，ALT+鼠标中键按下拖动视角。<br><img src="/images/pasted-20.png" alt="tile editor mode"><br>地形、水、台阶、树木、草地、标志物/建筑、批量选择、禁止选择。</p><h4 id="地形笔刷"><a href="#地形笔刷" class="headerlink" title="地形笔刷"></a>地形笔刷</h4><p>鼠标左键：建立一层地形，再在这个地形上点击就是两层的地形，地形会根据你的层数会有不同的美化，层数可以无限加，但是考虑到游戏内的因素，一般5~6层就封顶了。<br>Ctrl+左键是降低一层，shift+左键是按照你目前点击的那个那个高度刷地形，刷到底地方直接变成那个高度。按住鼠标中键左右摆动是用来调节笔刷大小，也就是圈的大小，鼠标不动按G/B则为在当前区域内提升/降低一个台阶。<br><img src="/images/pasted-21.png" alt="地形笔刷"></p><h4 id="水体笔刷"><a href="#水体笔刷" class="headerlink" title="水体笔刷"></a>水体笔刷</h4><p>与地形一样，左键/ctrl+左键<br><img src="/images/pasted-22.png" alt="水体笔刷"></p><h4 id="台阶笔刷"><a href="#台阶笔刷" class="headerlink" title="台阶笔刷"></a>台阶笔刷</h4><p>台阶的话有两个用途，第一个就是作为层与层之间的连接,第二是造一个路径，要注意，利用台阶刷造出的路径不能种树和花，操作同上。<br><img src="/images/pasted-23.png" alt="台阶"></p><h4 id="树木笔刷"><a href="#树木笔刷" class="headerlink" title="树木笔刷"></a>树木笔刷</h4><p><img src="/images/pasted-24.png" alt="树木属性"><br>这两个是笔刷大小和稀疏度，鼠标左键：创建树木<br>Ctrl+鼠标左键：移除树木<br>Shift+鼠标左键：增加树木的量：无→第一层→第二层→第三层<br>Ctrl+Shift+鼠标左键：减少树木的量：第三层→第二层→第一层→无<br>G+鼠标左键：增加树木高度：与增加数目的量的区别是这个不会增加新的树木，即-第一层→第二层→第三层<br>B+鼠标左键：减少树木高度：与减少数目的量的区别是这个不会减少树木，即-第三层→第二层→第一层<br>C+鼠标左键：改变树木风格,树木的风格可以在Tree Type栏内选择</p><p><img src="/images/pasted-25.png" alt="树木风格"><br>按下滚轮+鼠标左右拖动：改变刷子半径，往左缩小往右放大<br>Ctrl+按下滚轮+鼠标左右移动：改变刷子密度</p><p><img src="/images/pasted-26.png" alt="树木笔刷"></p><h4 id="草地笔刷"><a href="#草地笔刷" class="headerlink" title="草地笔刷"></a>草地笔刷</h4><p>操作与树木笔刷相似。<br><img src="/images/pasted-27.png" alt="草地"></p><h4 id="装饰物笔刷"><a href="#装饰物笔刷" class="headerlink" title="装饰物笔刷"></a>装饰物笔刷</h4><p>鼠标左键点击：增加装饰物<br>Ctrl+鼠标左键：移除装饰物<br>鼠标左键拖动：拖动装饰物<br>Shift+鼠标左键拖动：复制一个装饰物并且拖动复制出来的装饰物<br>X+鼠标左键：旋转装饰物<br>F：变成下一个装饰物形态（首先你要用鼠标光标移动到一个装饰物上面）<br>V：变成上一个装饰物形态（首先你要用鼠标光标移动到一个装饰物上面）<br>N：切换风格设置：比如从天辉军团切换到夜魇军团<br><img src="/images/pasted-28.png" alt="装饰物"></p><h4 id="批量选择工具"><a href="#批量选择工具" class="headerlink" title="批量选择工具"></a>批量选择工具</h4><p>选择<br>　　鼠标左键：选择物体<br>　　Ctrl+鼠标左键：取消选择物体<br>　　Esc：清空选择<br>　　按下滚轮：套索选择<br>　　X+按下滚轮：矩形选框<br>　　Ctrl+V：直接粘贴在鼠标光标停留的位置（首先你要复制内容）<br>　　Ctrl+Shift+V：粘贴并选择粘贴在哪里，并且一直持续粘贴内容，按ESC结束<br>　　G：将选择的地形向上抬高一步<br>　　B：将选择的地形向下抬低一步<br>　　N：切换风格设置：比如从天辉军团切换到夜魇军团<br>　　Selected items按钮介绍：<br>　　Next Varition：切换到下一个形态<br>　　PreviousVariation：切换到上一个形态<br>　　RandomVariation：切换到随机的一个形态<br>　　Collapse：分离<br>　　Next Tile Set：切换到下一个地砖设置（比如说天辉的绿草地切换到夜魇的灰地板）<br>　　Previous TileSet：切换到上一个地砖设置<br>Assign Current Tile Set：切换到当前的地砖设置  </p><h4 id="实体与编译"><a href="#实体与编译" class="headerlink" title="实体与编译"></a>实体与编译</h4><p>一张基本的地形图，除了包含地形要素外，还需要添加实体，例如天辉或者夜魇玩家的出生点。这一些出生点实体非常重要！少了它们，地图将不可能正确编译！<br>在Prefabs里面，选择basic_entities这一个vmap，拖入到地图中。<br>或者拖basic_entities_radiantbasic_entities_dire到地图中的位置。<br>这些实体，是天辉/夜魇方的玩家的出生位置，他们的位置你可以根据你的地图的需要确定</p><p><img src="/images/pasted-29.png" alt="不到啥玩意"><br>托到想要的出生地就可以了<br>几个概念<br><strong>entity （实体）</strong> - Dota2 里面所有逻辑单位都是实体，它可以接收事件或者产生事件或者存储某些信息，也可以在代码里通过 API 方便的找到某个实体。</p><p><strong>Prefab（预制体）</strong> - 单个或多个实体或模型的一组合集，并且保存到了硬盘上，可以跨地图使用。每当你修改一个prefab，所有用到这个 Prefab 的地方也会同样变化。</p><p><strong>Instance（实例）</strong>- 同样也是单个或多个实体或模型的一组合集，但是没有保存到硬盘上，不可以跨地图使用。也可以复制多份使用，修改其中一份（双击其中一个实体可以进行修改），就会影响到其他相同实例。</p>]]></content>
      
      
      <categories>
          
          <category> dota2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> dota2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot</title>
      <link href="/2019/11/21/pring-boot/"/>
      <url>/2019/11/21/pring-boot/</url>
      
        <content type="html"><![CDATA[<p>….</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2019/10/21/%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/10/21/%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><h3 id="hdu-2084-数塔"><a href="#hdu-2084-数塔" class="headerlink" title="hdu 2084 数塔"></a>hdu 2084 数塔</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="hdu-2041-超级楼梯-简单斐波那契"><a href="#hdu-2041-超级楼梯-简单斐波那契" class="headerlink" title="hdu 2041 超级楼梯(简单斐波那契)"></a>hdu 2041 超级楼梯(简单斐波那契)</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> fn<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setfn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    fn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    fn<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    fn<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        fn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token operator">+</span> fn<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">setfn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> fn<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="hdu-2050-折线分割"><a href="#hdu-2050-折线分割" class="headerlink" title="hdu 2050 折线分割"></a>hdu 2050 折线分割</h3><p>如果以直线分割平面，第n条直线将最多产生n-1个交点，会多n-1+1个平面<br>折线也类似，第n条折线最多产生2<em>2</em>（n-1)个交点，会多4<em>（n-1)+1个平面。得dp方程：dp[i]=dp[i-1]+4</em>(i-1)+1</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>c<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10005</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="CF-429B-B-Working-out-四个角递推"><a href="#CF-429B-B-Working-out-四个角递推" class="headerlink" title="CF 429B B.Working out 四个角递推"></a>CF 429B B.Working out 四个角递推</h3><p>首先要保证只有一个格子重合,那么只可能是以下两种情况:<br>(1) A向右走,相遇后继续向右走,而B向上走,相遇后继续向上走<br>(2) A向下走,相遇后继续向下走,而B向右走,相遇后继续向右走</p><p>接着枚举相遇的格子(i,j)（枚举时注意不可能在四个角相遇）,就是考虑四个方向的dp：<br>dp1[i][j] = 从 (1, 1) 到 (i, j) 的最大分数<br>dp2[i][j] = 从 (i, j) 到 (n, m) 的最大分数<br>dp3[i][j] = 从 (n, 1) 到 (i, j) 的最大分数<br>dp4[i][j] = 从 (i, j) 到 (1, m) 的最大分数  </p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> M 1002</span><span class="token keyword">int</span> mpt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp1<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp2<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp3<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp4<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>mpt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        dp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>mpt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        dp2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dp2<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>mpt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        dp3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>dp3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>mpt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>dp3<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        dp4<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>dp4<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>mpt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>dp4<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp2<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp3<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp4<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="zoj-3747-Attack-on-Titans"><a href="#zoj-3747-Attack-on-Titans" class="headerlink" title="zoj 3747 Attack on Titans"></a>zoj 3747 Attack on Titans</h3><p>题意：给出长度为n，由字符’G’，’P’，’R’，组成的字符串，要求至少有m个连续的’G’，至多有k个连续的’R’。问有多少满足条件的字符串。</p><p>思路：可以转换成求最多有n个连续的’G’，至多有k个连续的’R’的字符串数量sum和最多有m-1个连续的’G’，至多有k个连续的’R’的字符串数量ans,那么答案便为sum-ans;</p><p>dp[i][j]表示长度为i,以j结尾的字符串数量，j（0=G，1=R，2=P）；</p><p>当第i个为P的情况很好考虑不会对连续的R和G产生影响，dp[i][2]=dp[i-1][0]+dp[i-1][1]+dp[i-1][2];</p><p>当第i个为G时</p><p>如果i&lt;=u 时 无论怎么放都不会超过u个连续的G这个限制条件 所以dp[i][0]=dp[i-1][0]+dp[i-1][1]+dp[i-1][2];</p><p>如果i=u+1时，要排除前u个都放了G的情况，dp[i][0]=dp[i-1][0]+dp[i-1][1]+dp[i-1][2]-1;</p><p>如果i&gt;u+1时，要排除从i-1到i-u位置都放了G的情况，dp[i][0]=dp[i-1][0]+dp[i-1][1]+dp[i-1][2]-dp[i-u-1][1]-dp[i-u-1][2];           </p><p>当第i个为R时</p><p>如果i&lt;=v 时 无论怎么放都不会超过u个连续的G这个限制条件 所以dp[i][1]=dp[i-1][0]+dp[i-1][1]+dp[i-1][2];</p><p>如果i=v+1时，要排除前v个都放了G的情况，dp[i][1]=dp[i-1][0]+dp[i-1][1]+dp[i-1][2]-1;</p><p>如果i&gt;v+1时，要排除从i-1到i-v位置都放了G的情况，dp[i][1]=dp[i-1][0]+dp[i-1][1]+dp[i-1][2]-dp[i-v-1][0]-dp[i-v-1][2];</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> Maxn 1100000</span><span class="token macro property">#<span class="token directive keyword">define</span> M 1000000007</span><span class="token keyword">long</span> <span class="token keyword">long</span> dp<span class="token punctuation">[</span>Maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">Cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> u<span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>        <span class="token keyword">else</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> v<span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>        <span class="token keyword">else</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span>        u <span class="token operator">=</span> n<span class="token punctuation">,</span> v <span class="token operator">=</span> k<span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">Cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> v <span class="token operator">=</span> k<span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ans <span class="token operator">-</span> <span class="token function">Cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> M <span class="token operator">+</span> M<span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="hdu-4747-Mex-线段树？×-区间处理√"><a href="#hdu-4747-Mex-线段树？×-区间处理√" class="headerlink" title="hdu 4747 Mex (线段树？× 区间处理√)"></a>hdu 4747 Mex (线段树？× 区间处理√)</h3><p>题意：Mex(l,r) 求的是[l,r]区间内所有数的集合里没有出现过的最小的数字，即博弈里的mex。现在给出一个序列[1,n]，求解所有1≤l≤r≤n 的[l,r]中的mex[l,r]的和。</p><p>  首先我们将区间右端点统一为k，用num[k]存k这个位置对应的数字。即我们处理到k这个端点时，我们处理的是所有[l,k]（1≤l≤k）的mex。此时我们只需要for一遍然后对应处理k就行。<br>  那怎么加速k这个端点的处理呢？ 我们用t[l] 表示[l,k] 中所有数的集合set从零开始连续的最大的数，即mex-1，那么假如我们的序列为6 0 3 2 0 1 0 ，处理到最后一个数k=7，对应的t为 3 3 3 2 1 1 0,可以看出t为一个非递减序列,因此我们用aft[o]存t中数字o连续序列的最后一个位置，例如aft[1]=6。<br>  我们可以将这个问题化为区间右端点扩张的问题，每次更新对应一些区间的右端点扩张。我们还用last[o]存数字o最后出现的位置。可以看出我们每到一个新端点k，它对应的数字为knum，影响的t区间为大于等于knum的数字所在的区间，准确的说是s大于等于knum并且aft[s]==aft[knum]的数字所在的区间，因为一旦aft[s]&lt;aft[knum]那么限制他的右端点扩张的数字就不是knum了，而是大于knum的数字。所以我们需要更新这些数字所在区间右端点，并且从小到大更新，设更新的区间右端点最大值为maxn。由于这些数字区间右端点还受aft[knum-1]限制，初始maxn=aft[knum-1]。然后每个数字s的右端点最大值为min（aft[knum-1],last[knum]，last[knum+1]……last[s]）（最左端的端点限制扩张）。至此我们快速的更新t区间。另外我们用all存现在l∈[1,k] 所有[l,k]mex的和，那么每次更新右端点就需要给all加上更新的区间的长度作为扩张对mex的贡献。最后我们把所有的all加起来就是答案。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">200010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aft<span class="token punctuation">[</span><span class="token number">200010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>last<span class="token punctuation">[</span><span class="token number">200010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">,</span>all<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">,</span>dk<span class="token punctuation">,</span>maxn<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        all<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>aft<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>aft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>n<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans<span class="token operator">+</span><span class="token operator">=</span>all<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            last<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                maxn<span class="token operator">=</span>aft<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                maxn<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            k<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            dk<span class="token operator">=</span>aft<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>aft<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>aft<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                maxn<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span>last<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>maxn<span class="token operator">==</span>dk<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                all<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span><span class="token punctuation">(</span>maxn<span class="token operator">-</span>aft<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                aft<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>maxn<span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxn<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span>last<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            all<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span><span class="token punctuation">(</span>maxn<span class="token operator">-</span>aft<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            aft<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>maxn<span class="token punctuation">;</span>            ans<span class="token operator">+</span><span class="token operator">=</span>all<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++复(xue)习 </title>
      <link href="/2019/10/16/-%E5%A4%8D-xue-%E4%B9%A0/"/>
      <url>/2019/10/16/-%E5%A4%8D-xue-%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><strong>想到哪写到哪嗷</strong></p><h2 id="c-内存分区"><a href="#c-内存分区" class="headerlink" title="c++内存分区"></a>c++内存分区</h2><p>一个由c/C++编译的程序占用的内存分为以下几个部分<br>1、栈区（stack）—由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。  </p><p>2、堆区（heap）—一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。</p><p>3、全局区（静态区）（static）—全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</p><p>4、文字常量区—常量字符串就是放在这里的。程序结束后由系统释放。</p><p>5、程序代码区</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共/回文子序列/串</title>
      <link href="/2019/09/15/%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97-%E5%AD%90%E4%B8%B2/"/>
      <url>/2019/09/15/%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97-%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h2><p>计算最长公共子串，区别于最长公共子序列，子串要求位置是连续的。同样利用动态规划的思想。用一个二维数组c[][]来记录两个串的情况，</p><p>转移方程为：<br>如果s1[i]==s2[j]，则c[i][j]=c[i-1][j-1]+1<br>如果s1[i]！=s2[j]，则c[i][j]=0  </p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_N 500</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">LCS</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len1<span class="token punctuation">,</span>len2<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>maxlen<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    len1<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    len2<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>s2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>s2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>maxlen<span class="token punctuation">)</span>                maxlen<span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxlen<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> LCSlen<span class="token punctuation">;</span>    LCSlen<span class="token operator">=</span><span class="token function">LCS</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>LCSlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><p>可反转字符串利用最长公共子串解决，动态规划<br>另学习Manacher算法，<strong>复杂度O(n)</strong><br>很巧妙的算法，利用加分隔符和回文特性</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN<span class="token operator">=</span><span class="token number">110010</span><span class="token punctuation">;</span><span class="token keyword">char</span> Ma<span class="token punctuation">[</span>MAXN<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Mp<span class="token punctuation">[</span>MAXN<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Manacher</span><span class="token punctuation">(</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Ma<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'$'</span><span class="token punctuation">;</span>    Ma<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'#'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Ma<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        Ma<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'#'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Ma<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mx<span class="token operator">></span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//mx即为当前计算回文串最右边字符的最大值</span>            Mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>mx<span class="token operator">-</span>i<span class="token punctuation">,</span>Mp<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>id<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            Mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>Ma<span class="token punctuation">[</span>i<span class="token operator">+</span>Mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>Ma<span class="token punctuation">[</span>i<span class="token operator">-</span>Mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sb "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>Mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>mx<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//若新计算的回文串右端点位置大于mx，要更新id和mx的值</span>        <span class="token punctuation">{</span>            mx<span class="token operator">=</span>i<span class="token operator">+</span>Mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            id<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>Mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">13</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>Mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i=%d id=%d mx=%d \n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>id<span class="token punctuation">,</span>mx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** abaaba* i:    0 1 2 3 4 5 6 7 8 9 10 11 12 13* Ma[i]: $ # a # b # a # a # b  #  a  #* Mp[i]: 1 1 2 1 4 1 2 7 2 1 4  1  2  1*/</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Manacher</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p>LCS问题</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> martix<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    martix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> martix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>martix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> martix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        martix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> martix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        martix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> martix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>martix<span class="token punctuation">[</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="最长回文子序列"><a href="#最长回文子序列" class="headerlink" title="最长回文子序列"></a>最长回文子序列</h2><p>同样的，可以反转利用动态规划解决<br>另有区间DP可解，但是不常见  </p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">2009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>len<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>len<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">+</span>len<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token operator">+</span>len<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>                ans<span class="token operator">=</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019icpc南京网络赛</title>
      <link href="/2019/09/03/019icpc%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
      <url>/2019/09/03/019icpc%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="F-Greedy-Sequence"><a href="#F-Greedy-Sequence" class="headerlink" title="F Greedy Sequence"></a>F Greedy Sequence</h2><p>限制5000 ms 256 MB</p><p>You’re given a permutation a of length n (1 ≤ n ≤ 105). For each i ∈ [1, n], construct a sequence si by the following rules:</p><ol><li><p>si[1] = i;</p></li><li><p>The length of si is n, and for each j ∈ [2, n], si[j] ≤ si[j − 1];</p></li><li><p>First, we must choose all the possible elements of si from permutation a. If the indeof si[j] in permutation a is pos[j], for each j ≥ 2, ∣pos[j] − pos[j − 1]∣ ≤ k ( 1 ≤ k ≤ 105). And for each si, every element of si must occur in a at most once.</p></li><li><p>After we choose all possible elements for si, if the length of si is smaller than n, thevalue of every undetermined element of si is 0;</p></li><li><p>For each si, we must make its weight high enough. Consider two sequences C = [c1, c2, …cn] and D = [d1, d2, …, dn], we say the weigof C is higher than that of D if and only if there exists an integer k such that 1 ≤ k ≤ nci = di for all 1 ≤ i &lt; k, and ck &gt; dk . If for each i ∈ [1, n], ci = di, the weight of C is equal to the weight of D. For each i ∈ [1, n], print the number of non-zero elements of si separated by a space.It’s guaranteed that there is only one possible answer.</p></li></ol><p><strong>Input</strong></p><p>There are multiple test cases.The fifirst line contains one integer T(1 ≤ T ≤ 20), denoting the number of test cases.Each test case contains two lines, the fifirst line contains two integers n and k ( 1 ≤ n, k ≤ 105), the second line contains n distinct integers a1, a2, …, an (1 ≤ ai ≤ n)separated by a space, which is the permutation a.</p><p><strong>Output</strong></p><p>For each test case, print one line consists of n integers ∣s1∣, ∣s2∣, …, ∣sn∣ separated by aspace. ∣si∣ is the number of non-zero elements of sequence si. There is no space at the end of the line.</p><p><strong>Sample Input 1</strong></p><p>2</p><p>3 1</p><p>3 2 1</p><p>7 2</p><p>3 1 4 6 2 5 7</p><p><strong>Sample Output 1</strong></p><p>1 2 3</p><p>1 1 2 3 2 3 3</p><p>读题费死劲！<br><strong>题意</strong>：构建n个长度为n的串，对于每个串si有以下要求：<br>si[1]=i,s串中保证降序，串中第2位开始对应位置映射到输入的a序列中寻找元素，要求|pos[j] -pos[j-1]|&lt;=k即左右k个位置，后要求权值最大即找到符合条件中最大的那个进入s串。<br>输出n个串中有多少个非零字符。<br>稳妥做法，线段树维护区间中符合条件的最大值</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> maxx<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    maxx<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">[</span>id<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxx<span class="token punctuation">[</span>id<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxx<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>         <span class="token function">update</span><span class="token punctuation">(</span>id<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token function">update</span><span class="token punctuation">(</span>id<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ql <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> qr<span class="token punctuation">)</span>         <span class="token keyword">return</span> maxx<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ql <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>         res <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>id<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>qr <span class="token operator">></span> mid<span class="token punctuation">)</span>         res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span>id<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>maxx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pos<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span>                 <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>赛后发现好像可以暴过去</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            pos<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>             s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>pos<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>k<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                     s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="H-Holy-Grail"><a href="#H-Holy-Grail" class="headerlink" title="H Holy Grail"></a>H Holy Grail</h2><p>限制1000 ms 256 MB</p><p>As the current heir of a wizarding family with a long history,unfortunately, you find yourself forced to participate in the cruel Holy Grail War which has a reincarnation of sixty years.However,fortunately,you summoned a Caster Servant with a powerful Noble Phantasm.When your servant launch her Noble Phantasm,it will construct a magic field,which is actually a directed graph consisting of n vertices and m edges.More specifically,the graph satisfies the following restrictions :</p><p>Does not have multiple edges(for each pair of vertices x and y, there is at most one edge between this pair of vertices in the graph) and does not have self-loops(edges connecting the vertex with itself).<br>May have negative-weighted edges.<br>Does not have a negative-weighted loop.<br>n&lt;=300 , m&lt;=500.<br>Currently,as your servant’s Master,as long as you add extra 6 edges to the graph,you will beat the other 6 masters to win the Holy Grail.</p><p>However，you are subject to the following restrictions when you add the edges to the graph:</p><p>Each time you add an edge whose cost is c,it will cost you c units of Magic Value.Therefore,you need to add an edge which has the lowest weight(it’s probably that you need to add an edge which has a negative weight).<br>Each time you add an edge to the graph,the graph must not have negative loops,otherwise you will be engulfed by the Holy Grail you summon.</p><p><strong>Input</strong><br>Input data contains multiple test cases. The first line of input contains integer t — the number of testcases (1 ≤t≤5).</p><p>For each test case,the first line contains two integers n,m,the number of vertices in the graph, the initial number of edges in the graph.</p><p>Then m lines follow, each line contains three integers x, y and w (0≤x,y&lt;n,-10^9≤w≤10^9 ，x≠y) denoting an edge from vertices x to y (0-indexed) of weight w.</p><p>Then 6 lines follow, each line contains two integers s,t denoting the starting vertex and the ending vertex of the edge you need to add to the graph.</p><p>It is guaranteed that there is not an edge starting from s to t before you add any edges and there must exists such an edge which has the lowest weight and satisfies the above restrictions, meaning the solution absolutely exists for each query.</p><p><strong>Output</strong><br>For each test case,output 66 lines.</p><p>Each line contains the weight of the edge you add to the graph.</p><p><strong>样例输入</strong><br>1<br>10 15<br>4 7 10<br>7 6 3<br>5 3 3<br>1 4 11<br>0 6 20<br>9 8 25<br>3 0 9<br>1 2 15<br>9 0 27<br>5 2 0<br>7 3 -5<br>1 7 21<br>5 0 1<br>9 3 16<br>1 8 4<br>4 1<br>0 3<br>6 9<br>2 1<br>8 7<br>0 4<br><strong>样例输出</strong><br>-11<br>-9<br>-45<br>-15<br>17<br>7</p><p><strong>题意</strong>：给定一个有向图(n,m)，保证只有一个起点和终点，点之间只有一个边，没有环路，边有各自的权值并且可能为负，现在要依次加入6条边，求在继续保证以上条件(没有负权环)的情况下6条边最小的权值，题目保证有解。<br>反过来想，在加入一条边的时候(从u→v)，多半是要形成一个环路，那么设从v→u的权值为x，添加的边权为y，要保证x+y&gt;=0的同时x最小，即x=0-y，所以我们用floyd求出各点之前的最短路即可，那么新加的边的最小权值就是v到u的最短路的相反数。新加一条边后重新floyd。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">305</span><span class="token punctuation">;</span><span class="token keyword">const</span> LL inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>LL dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>LL w<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span><span class="token operator">++</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>x<span class="token punctuation">,</span><span class="token operator">++</span>y<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1LL</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1LL</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="B-super-log"><a href="#B-super-log" class="headerlink" title="B super_log"></a>B super_log</h2><p>In Complexity theory, some functions are nearly O(1), but it is greater then O(1). For example, the complexity of a typical disjoint set is O(nα(n)). Here α(n) is Inverse Ackermann Function, which growth speed is very slow. So in practical application, we often assume α(n)≤4.</p><p>However O(α(n))) is greater than O(1), that means if nn is large enough, α(n) can greater than any constant value.</p><p>Now your task is let another slowly function log* x reach a constant value bb. Here log* is iterated logarithm function, it means “the number of times the logarithm function iteratively applied on xx before the result is less than logarithm base a”.</p><p>Formally, consider a iterated logarithm function log_{a}^* loga</p><p><img src="/images/pasted-17.png" alt="公式"><br>Find the minimum positive integer argument xx, let log_{a}^* (x) \ge blog (x)≥b. The answer may be very large, so just print the result xx after mod m.</p><p><strong>Input</strong><br>The first line of the input is a single integer T(T≤300) indicating the number of test cases.</p><p>Each of the following lines contains 3 integers aa , bb and m.</p><p>1≤a≤1000000</p><p>0≤b≤1000000</p><p>1≤m≤1000000</p><p>Note that if a==1, we consider the minimum number x is 1.</p><p><strong>Output</strong><br>For each test case, output xx mod mm in a single line.</p><p><strong>样例输入</strong><br>5<br>2 0 3<br>3 1 2<br>3 1 100<br>3 2 16<br>5 3 233<br><strong>样例输出</strong><br>1<br>1<br>3<br>11<br>223</p><p><strong>题意</strong>：求a的a的a的..次方，求b次，并取模m。<br>欧拉降幂迭代。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>bitset<span class="token operator">&lt;</span>maxn<span class="token operator">></span>notprime<span class="token punctuation">;</span><span class="token keyword">int</span> phi<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>prime<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>maxn<span class="token number">-5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>notprime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            prime<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i为素数时，phi[i]=i-1</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>cnt<span class="token operator">&amp;&amp;</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">&lt;=</span>maxn<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            notprime<span class="token punctuation">[</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//每个数只被它的最小质因数给筛掉</span>                phi<span class="token punctuation">[</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//当a与b互质时，满足phi(a∗b)=phi(a)∗phi(b),积性函数</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> phi<span class="token punctuation">[</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//phi[i∗prime[j]]=phi[i]∗phi[prime[j]]=phi[i]∗(prime[j]−1);</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ll <span class="token function">quick_mod</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll n<span class="token punctuation">,</span>ll mod<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span>res<span class="token operator">*</span>a<span class="token operator">></span>mod<span class="token operator">?</span>res<span class="token operator">*</span>a<span class="token operator">%</span>mod<span class="token operator">+</span>mod<span class="token operator">:</span>res<span class="token operator">*</span>a<span class="token punctuation">;</span>        a<span class="token operator">=</span>a<span class="token operator">*</span>a<span class="token operator">></span>mod<span class="token operator">?</span>a<span class="token operator">*</span>a<span class="token operator">%</span>mod<span class="token operator">+</span>mod<span class="token operator">:</span>a<span class="token operator">*</span>a<span class="token punctuation">;</span>        n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">deal</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">,</span>ll m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    ll res<span class="token operator">=</span><span class="token function">deal</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token number">-1</span><span class="token punctuation">,</span>phi<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">quick_mod</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>res<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    ll a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>m<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">deal</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token operator">%</span>m<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> icpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown math 数学公式语法</title>
      <link href="/2019/08/09/markdown-math-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/08/09/markdown-math-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1．插入公式"><a href="#1．插入公式" class="headerlink" title="1．插入公式"></a>1．插入公式</h2><ul><li><p>行中公式可以用如下方法表示：</p><pre class=" language-java"><code class="language-java">$ 数学公式 $</code></pre></li><li><p>独立公式可以用如下方法表示：</p><pre class=" language-java"><code class="language-java">$$ 数学公式 $$</code></pre></li><li><p>自动编号的公式可以用如下方法表示：  </p><pre class=" language-java"><code class="language-java">\begin<span class="token punctuation">{</span>equation<span class="token punctuation">}</span>数学公式\label<span class="token punctuation">{</span>eq<span class="token operator">:</span>当前公式名<span class="token punctuation">}</span>\end<span class="token punctuation">{</span>equation<span class="token punctuation">}</span></code></pre></li></ul><p><strong>自动编号后的公式可在全文任意处使用 <code>\eqref{eq:公式名}</code> 语句引用。</strong></p><ul><li><p>例子：</p><pre class=" language-java"><code class="language-java">$ J_\<span class="token function">alpha</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> \sum_<span class="token punctuation">{</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">^</span>\infty \frac<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>m<span class="token punctuation">}</span><span class="token punctuation">{</span>m<span class="token operator">!</span> \<span class="token function">Gamma</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> \alpha <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>\<span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \frac<span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">^</span><span class="token punctuation">{</span>2m <span class="token operator">+</span> \alpha<span class="token punctuation">}</span> \text <span class="token punctuation">{</span>，行内公式示例<span class="token punctuation">}</span> $</code></pre></li><li><p>显示：$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例} $</p></li><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$ J_\<span class="token function">alpha</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> \sum_<span class="token punctuation">{</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">^</span>\infty \frac<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>m<span class="token punctuation">}</span><span class="token punctuation">{</span>m<span class="token operator">!</span> \<span class="token function">Gamma</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> \alpha <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>\<span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \frac<span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">^</span><span class="token punctuation">{</span>2m <span class="token operator">+</span> \alpha<span class="token punctuation">}</span> \text <span class="token punctuation">{</span>，独立公式示例<span class="token punctuation">}</span> $$</code></pre></li><li><p>显示：$$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，独立公式示例} $$</p></li><li><p>例子：</p><pre class=" language-java"><code class="language-java">在公式 \eqref<span class="token punctuation">{</span>eq<span class="token operator">:</span>sample<span class="token punctuation">}</span> 中，我们看到了这个被自动编号的公式。\begin<span class="token punctuation">{</span>equation<span class="token punctuation">}</span>E<span class="token operator">=</span>mc<span class="token operator">^</span><span class="token number">2</span> \text<span class="token punctuation">{</span>，自动编号公式示例<span class="token punctuation">}</span>\label<span class="token punctuation">{</span>eq<span class="token operator">:</span>Sample<span class="token punctuation">}</span>\end<span class="token punctuation">{</span>equation<span class="token punctuation">}</span></code></pre></li><li><p>显示：</p></li></ul><p>$$在公式 \eqref{eq:sample} 中，我们看到了这个被自动编号的公式。$$</p><p>\begin{equation}<br>E=mc^2 \text{，自动编号公式示例}<br>\label{eq:sample}<br>\end{equation}</p><h2 id="2．输入上下标"><a href="#2．输入上下标" class="headerlink" title="2．输入上下标"></a>2．输入上下标</h2><p><code>^</code> 表示上标, <code>_</code> 表示下标。如果上下标的内容多于一个字符，需要用 <code>{}</code> 将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。</p><ul><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$ x<span class="token operator">^</span><span class="token punctuation">{</span>y<span class="token operator">^</span>z<span class="token punctuation">}</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">{</span>\rm e<span class="token punctuation">}</span><span class="token operator">^</span>x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token operator">-</span>2xy<span class="token operator">^</span>w<span class="token punctuation">}</span> $$</code></pre></li><li><p>显示：$$ x^{y^z}=(1+{\rm e}^x)^{-2xy^w} $$</p></li><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span>O<span class="token operator">^</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">}</span>$$</code></pre></li><li><p>显示：$${(16+i)}^{8}O^{2+4}$$<br>如果要在左右两边都有上下标，可以用 <code>\sideset</code> 命令。</p></li><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$ \sideset<span class="token punctuation">{</span><span class="token operator">^</span>1_2<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">^</span>3_4<span class="token punctuation">}</span>\bigotimes $$</code></pre></li><li><p>显示：$$\sideset{^1_2}{^3_4}\bigotimes$$</p></li></ul><h2 id="3．输入括号和分隔符"><a href="#3．输入括号和分隔符" class="headerlink" title="3．输入括号和分隔符"></a>3．输入括号和分隔符</h2><p><code>()</code>、<code>[]</code> 和 <code>|</code> 表示符号本身，使用 <code>\{\}</code> 来表示 <code>{}</code> 。当要显示大号的括号或分隔符时，要用 <code>\left</code> 和 <code>\right</code> 命令。</p><p>一些特殊的括号：  </p><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\langle</td><td align="center">$\langle$</td><td align="center">\rangle</td><td align="center">$\rangle$</td></tr><tr><td align="center">\lceil</td><td align="center">$\lceil$</td><td align="center">\rceil</td><td align="center">$\rceil$</td></tr><tr><td align="center">\lfloor</td><td align="center">$\lfloor$</td><td align="center">\rfloor</td><td align="center">$\rfloor$</td></tr><tr><td align="center">\lbrace</td><td align="center">$\lbrace$</td><td align="center">\rbrace</td><td align="center">$\rbrace$</td></tr></tbody></table><ul><li>例子：</li></ul><pre class=" language-java"><code class="language-java">$$ <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">=</span> 3y<span class="token operator">^</span>2z \<span class="token function">left</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token operator">+</span>\frac<span class="token punctuation">{</span>7x<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span> \right<span class="token punctuation">)</span> $$</code></pre><ul><li>显示：<br>$$ f(x,y,z) = 3y^2z \left( 3+\frac{7x+5}{1+y^2} \right) $$</li></ul><h2 id="4．输入分数"><a href="#4．输入分数" class="headerlink" title="4．输入分数"></a>4．输入分数</h2><p>通常使用 <code>\frac {分子} {分母}</code> 命令产生一个分数，分数可嵌套。<br>便捷情况可直接输入 <code>\frac ab</code> 来快速生成一个 $\frac ab$ 。<br>如果分式很复杂，亦可使用 <code>分子 \over 分母</code> 命令，此时分数仅有一层。</p><ul><li>例子：<pre class=" language-java"><code class="language-java">$$\frac<span class="token punctuation">{</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">{</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span> \quad and \quad <span class="token punctuation">{</span>a<span class="token operator">+</span><span class="token number">1</span>\over b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span>$$</code></pre></li><li>显示：$$\frac{a-1}{b-1} \quad and \quad {a+1\over b+1}$$</li></ul><h2 id="5．输入开方"><a href="#5．输入开方" class="headerlink" title="5．输入开方"></a>5．输入开方</h2><p>使用 <code>\sqrt [根指数，省略时为2] {被开方数}</code> 命令输入开方。</p><ul><li>例子：<pre class=" language-java"><code class="language-java">$$\sqrt<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> \quad and \quad \sqrt<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>$$</code></pre></li><li>显示：$$\sqrt{2} \quad and \quad \sqrt[n]{3}$$</li></ul><h2 id="6．输入省略号"><a href="#6．输入省略号" class="headerlink" title="6．输入省略号"></a>6．输入省略号</h2><p>数学公式中常见的省略号有两种，<code>\ldots</code> 表示与文本底线对齐的省略号，<code>\cdots</code> 表示与文本中线对齐的省略号。</p><ul><li>例子：<pre class=" language-java"><code class="language-java">$$<span class="token function">f</span><span class="token punctuation">(</span>x_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>\underbrace<span class="token punctuation">{</span>\ldots<span class="token punctuation">}</span>_<span class="token punctuation">{</span>\rm ldots<span class="token punctuation">}</span> <span class="token punctuation">,</span>x_n<span class="token punctuation">)</span> <span class="token operator">=</span> x_1<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> x_2<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> \underbrace<span class="token punctuation">{</span>\cdots<span class="token punctuation">}</span>_<span class="token punctuation">{</span>\rm cdots<span class="token punctuation">}</span> <span class="token operator">+</span> x_n<span class="token operator">^</span><span class="token number">2</span>$$</code></pre></li><li>显示：$$f(x_1,x_2,\underbrace{\ldots}<em>{\rm ldots} ,x_n) = x_1^2 + x_2^2 + \underbrace{\cdots}</em>{\rm cdots} + x_n^2$$</li></ul><h2 id="7．输入矢量"><a href="#7．输入矢量" class="headerlink" title="7．输入矢量"></a>7．输入矢量</h2><p>使用 <code>\vec{矢量}</code> 来自动产生一个矢量。也可以使用 <code>\overrightarrow</code> 等命令自定义字母上方的符号。</p><ul><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$\vec<span class="token punctuation">{</span>a<span class="token punctuation">}</span> \cdot \vec<span class="token punctuation">{</span>b<span class="token punctuation">}</span><span class="token operator">=</span><span class="token number">0</span>$$</code></pre></li><li><p>显示：$$\vec{a} \cdot \vec{b}=0$$</p></li><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$\overleftarrow<span class="token punctuation">{</span>xy<span class="token punctuation">}</span> \quad and \quad \overleftrightarrow<span class="token punctuation">{</span>xy<span class="token punctuation">}</span> \quad and \quad \overrightarrow<span class="token punctuation">{</span>xy<span class="token punctuation">}</span>$$</code></pre></li><li><p>显示：$$\overleftarrow{xy} \quad and \quad \overleftrightarrow{xy} \quad and \quad \overrightarrow{xy}$$</p></li></ul><h2 id="8．输入积分"><a href="#8．输入积分" class="headerlink" title="8．输入积分"></a>8．输入积分</h2><p>使用 <code>\int_积分下限^积分上限 {被积表达式}</code> 来输入一个积分。</p><p>例子：</p><pre class=" language-java"><code class="language-java">$$\int_0<span class="token operator">^</span><span class="token number">1</span> <span class="token punctuation">{</span>x<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span> \<span class="token punctuation">,</span><span class="token punctuation">{</span>\rm d<span class="token punctuation">}</span>x$$</code></pre><p>显示：$$\int_0^1 {x^2} ,{\rm d}x$$</p><p>本例中 <code>\,</code> 和 <code>{\rm d}</code> 部分可省略，但建议加入，能使式子更美观。</p><h2 id="9．输入极限运算"><a href="#9．输入极限运算" class="headerlink" title="9．输入极限运算"></a>9．输入极限运算</h2><p>使用 <code>\lim_{变量 \to 表达式} 表达式</code> 来输入一个极限。如有需求，可以更改 <code>\to</code> 符号至任意符号。</p><p>例子：</p><pre class=" language-java"><code class="language-java">$$ \lim_<span class="token punctuation">{</span>n \to <span class="token operator">+</span>\infty<span class="token punctuation">}</span> \frac<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span> \quad and \quad \lim_<span class="token punctuation">{</span>x\leftarrow<span class="token punctuation">{</span>示例<span class="token punctuation">}</span><span class="token punctuation">}</span> \frac<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function">n</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span> $$</code></pre><p>显示：$$\lim_{n \to +\infty} \frac{1}{n(n+1)} \quad and \quad \lim_{x\leftarrow{示例}} \frac{1}{n(n+1)}$$</p><h2 id="10．输入累加、累乘运算"><a href="#10．输入累加、累乘运算" class="headerlink" title="10．输入累加、累乘运算"></a>10．输入累加、累乘运算</h2><p>使用 <code>\sum_{下标表达式}^{上标表达式} {累加表达式}</code> 来输入一个累加。<br>与之类似，使用 <code>\prod</code> <code>\bigcup</code> <code>\bigcap</code> 来分别输入累乘、并集和交集。<br>此类符号在行内显示时上下标表达式将会移至右上角和右下角。</p><ul><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$\sum_<span class="token punctuation">{</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">^</span>n \frac<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">{</span>i<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span> \quad and \quad \prod_<span class="token punctuation">{</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">^</span>n \frac<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">{</span>i<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span> \quad and \quad \bigcup_<span class="token punctuation">{</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> R$$</code></pre></li><li><p>显示：$$\sum_{i=1}^n \frac{1}{i^2} \quad and \quad \prod_{i=1}^n \frac{1}{i^2} \quad and \quad \bigcup_{i=1}^{2} R$$  </p></li></ul><h2 id="11．输入希腊字母"><a href="#11．输入希腊字母" class="headerlink" title="11．输入希腊字母"></a>11．输入希腊字母</h2><p>输入 <code>\小写希腊字母英文全称</code> 和 <code>\首字母大写希腊字母英文全称</code> 来分别输入小写和大写希腊字母。<br><strong>对于大写希腊字母与现有字母相同的，直接输入大写字母即可。</strong></p><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\alpha</td><td align="center">$\alpha$</td><td align="center">A</td><td align="center">$A$</td><td align="center">\beta</td><td align="center">$\beta$</td><td align="center">B</td><td align="center">$B$</td></tr><tr><td align="center">\gamma</td><td align="center">$\gamma$</td><td align="center">\Gamma</td><td align="center">$\Gamma$</td><td align="center">\delta</td><td align="center">$\delta$</td><td align="center">\Delta</td><td align="center">$\Delta$</td></tr><tr><td align="center">\epsilon</td><td align="center">$\epsilon$</td><td align="center">E</td><td align="center">$E$</td><td align="center">\zeta</td><td align="center">$\zeta$</td><td align="center">Z</td><td align="center">$Z$</td></tr><tr><td align="center">\eta</td><td align="center">$\eta$</td><td align="center">H</td><td align="center">$H$</td><td align="center">\theta</td><td align="center">$\theta$</td><td align="center">\Theta</td><td align="center">$\Theta$</td></tr><tr><td align="center">\iota</td><td align="center">$\iota$</td><td align="center">I</td><td align="center">$I$</td><td align="center">\kappa</td><td align="center">$\kappa$</td><td align="center">K</td><td align="center">$K$</td></tr><tr><td align="center">\lambda</td><td align="center">$\lambda$</td><td align="center">\Lambda</td><td align="center">$\Lambda$</td><td align="center">\mu</td><td align="center">$\mu$</td><td align="center">M</td><td align="center">$M$</td></tr><tr><td align="center">\nu</td><td align="center">$\nu$</td><td align="center">N</td><td align="center">$N$</td><td align="center">\xi</td><td align="center">$\xi$</td><td align="center">\Xi</td><td align="center">$\Xi$</td></tr><tr><td align="center">o</td><td align="center">$o$</td><td align="center">O</td><td align="center">$O$</td><td align="center">\pi</td><td align="center">$\pi$</td><td align="center">\Pi</td><td align="center">$\Pi$</td></tr><tr><td align="center">\rho</td><td align="center">$\rho$</td><td align="center">P</td><td align="center">$P$</td><td align="center">\sigma</td><td align="center">$\sigma$</td><td align="center">\Sigma</td><td align="center">$\Sigma$</td></tr><tr><td align="center">\tau</td><td align="center">$\tau$</td><td align="center">T</td><td align="center">$T$</td><td align="center">\upsilon</td><td align="center">$\upsilon$</td><td align="center">\Upsilon</td><td align="center">$\Upsilon$</td></tr><tr><td align="center">\phi</td><td align="center">$\phi$</td><td align="center">\Phi</td><td align="center">$\Phi$</td><td align="center">\chi</td><td align="center">$\chi$</td><td align="center">X</td><td align="center">$X$</td></tr><tr><td align="center">\psi</td><td align="center">$\psi$</td><td align="center">\Psi</td><td align="center">$\Psi$</td><td align="center">\omega</td><td align="center">$\omega$</td><td align="center">\Omega</td><td align="center">$\Omega$</td></tr></tbody></table><p><strong>部分字母有变量专用形式，以 <code>\var-</code> 开头。</strong></p><table><thead><tr><th align="center">小写形式</th><th align="center">大写形式</th><th align="center">变量形式</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\epsilon</td><td align="center">E</td><td align="center">\varepsilon</td><td align="center">$\epsilon \mid E \mid \varepsilon$</td></tr><tr><td align="center">\theta</td><td align="center">\Theta</td><td align="center">\vartheta</td><td align="center">$\theta \mid \Theta \mid \vartheta$</td></tr><tr><td align="center">\rho</td><td align="center">P</td><td align="center">\varrho</td><td align="center">$\rho \mid P \mid \varrho$</td></tr><tr><td align="center">\sigma</td><td align="center">\Sigma</td><td align="center">\varsigma</td><td align="center">$\sigma \mid \Sigma \mid \varsigma$</td></tr><tr><td align="center">\phi</td><td align="center">\Phi</td><td align="center">\varphi</td><td align="center">$\phi \mid \Phi \mid \varphi$</td></tr></tbody></table><h2 id="12．输入其它特殊字符"><a href="#12．输入其它特殊字符" class="headerlink" title="12．输入其它特殊字符"></a>12．输入其它特殊字符</h2><blockquote><p><strong>若需要显示更大或更小的字符，在符号前插入 <code>\large</code> 或 <code>\small</code> 命令。</strong></p></blockquote><blockquote><p>若找不到需要的符号，使用 <a href="http://detexify.kirelabs.org/classify.html" target="_blank" rel="noopener">$\rm{Detexify^2}$</a> 来画出想要的符号。</p></blockquote><h3 id="1-．关系运算符"><a href="#1-．关系运算符" class="headerlink" title="(1)．关系运算符"></a>(1)．关系运算符</h3><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\pm</td><td align="center">$\pm$</td><td align="center">\times</td><td align="center">$\times$</td><td align="center">\div</td><td align="center">$\div$</td><td align="center">\mid</td><td align="center">$\mid$</td></tr><tr><td align="center">\nmid</td><td align="center">$\nmid$</td><td align="center">\cdot</td><td align="center">$\cdot$</td><td align="center">\circ</td><td align="center">$\circ$</td><td align="center">\ast</td><td align="center">$\ast$</td></tr><tr><td align="center">\bigodot</td><td align="center">$\bigodot$</td><td align="center">\bigotimes</td><td align="center">$\bigotimes$</td><td align="center">\bigoplus</td><td align="center">$\bigoplus$</td><td align="center">\leq</td><td align="center">$\leq$</td></tr><tr><td align="center">\geq</td><td align="center">$\geq$</td><td align="center">\neq</td><td align="center">$\neq$</td><td align="center">\approx</td><td align="center">$\approx$</td><td align="center">\equiv</td><td align="center">$\equiv$</td></tr><tr><td align="center">\sum</td><td align="center">$\sum$</td><td align="center">\prod</td><td align="center">$\prod$</td><td align="center">\coprod</td><td align="center">$\coprod$</td><td align="center">\backslash</td><td align="center">$\backslash$</td></tr></tbody></table><h3 id="2-．集合运算符"><a href="#2-．集合运算符" class="headerlink" title="(2)．集合运算符"></a>(2)．集合运算符</h3><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\emptyset</td><td align="center">$\emptyset$</td><td align="center">\in</td><td align="center">$\in$</td><td align="center">\notin</td><td align="center">$\notin$</td></tr><tr><td align="center">\subset</td><td align="center">$\subset$</td><td align="center">\supset</td><td align="center">$\supset$</td><td align="center">\subseteq</td><td align="center">$\subseteq$</td></tr><tr><td align="center">\supseteq</td><td align="center">$\supseteq$</td><td align="center">\bigcap</td><td align="center">$\bigcap$</td><td align="center">\bigcup</td><td align="center">$\bigcup$</td></tr><tr><td align="center">\bigvee</td><td align="center">$\bigvee$</td><td align="center">\bigwedge</td><td align="center">$\bigwedge$</td><td align="center">\biguplus</td><td align="center">$\biguplus$</td></tr></tbody></table><h3 id="3-．对数运算符"><a href="#3-．对数运算符" class="headerlink" title="(3)．对数运算符"></a>(3)．对数运算符</h3><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\log</td><td align="center">$\log$</td><td align="center">\lg</td><td align="center">$\lg$</td><td align="center">\ln</td><td align="center">$\ln$</td></tr></tbody></table><h3 id="4-．三角运算符"><a href="#4-．三角运算符" class="headerlink" title="(4)．三角运算符"></a>(4)．三角运算符</h3><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">30^\circ</td><td align="center">$30^\circ$</td><td align="center">\bot</td><td align="center">$\bot$</td><td align="center">\angle A</td><td align="center">$\angle A$</td></tr><tr><td align="center">\sin</td><td align="center">$\sin$</td><td align="center">\cos</td><td align="center">$\cos$</td><td align="center">\tan</td><td align="center">$\tan$</td></tr><tr><td align="center">\csc</td><td align="center">$\csc$</td><td align="center">\sec</td><td align="center">$\sec$</td><td align="center">\cot</td><td align="center">$\cot$</td></tr></tbody></table><h3 id="5-．微积分运算符"><a href="#5-．微积分运算符" class="headerlink" title="(5)．微积分运算符"></a>(5)．微积分运算符</h3><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\int</td><td align="center">$\int$</td><td align="center">\iint</td><td align="center">$\iint$</td><td align="center">\iiint</td><td align="center">$\iiint$</td></tr><tr><td align="center">\iiiint</td><td align="center">$\iiiint$</td><td align="center">\oint</td><td align="center">$\oint$</td><td align="center">\prime</td><td align="center">$\prime$</td></tr><tr><td align="center">\lim</td><td align="center">$\lim$</td><td align="center">\infty</td><td align="center">$\infty$</td><td align="center">\nabla</td><td align="center">$\nabla$</td></tr></tbody></table><h3 id="6-．逻辑运算符"><a href="#6-．逻辑运算符" class="headerlink" title="(6)．逻辑运算符"></a>(6)．逻辑运算符</h3><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\because</td><td align="center">$\because$</td><td align="center">\therefore</td><td align="center">$\therefore$</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\forall</td><td align="center">$\forall$</td><td align="center">\exists</td><td align="center">$\exists$</td><td align="center">\not\subset</td><td align="center">$\not\subset$</td></tr><tr><td align="center">\not&lt;</td><td align="center">$\not&lt;$</td><td align="center">\not&gt;</td><td align="center">$\not&gt;$</td><td align="center">\not=</td><td align="center">$\not=$</td></tr></tbody></table><h3 id="7-．戴帽符号"><a href="#7-．戴帽符号" class="headerlink" title="(7)．戴帽符号"></a>(7)．戴帽符号</h3><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\hat{xy}</td><td align="center">$\hat{xy}$</td><td align="center">\widehat{xyz}</td><td align="center">$\widehat{xyz}$</td></tr><tr><td align="center">\tilde{xy}</td><td align="center">$\tilde{xy}$</td><td align="center">\widetilde{xyz}</td><td align="center">$\widetilde{xyz}$</td></tr><tr><td align="center">\check{x}</td><td align="center">$\check{x}$</td><td align="center">\breve{y}</td><td align="center">$\breve{y}$</td></tr><tr><td align="center">\grave{x}</td><td align="center">$\grave{x}$</td><td align="center">\acute{y}</td><td align="center">$\acute{y}$</td></tr></tbody></table><h3 id="8-．连线符号"><a href="#8-．连线符号" class="headerlink" title="(8)．连线符号"></a>(8)．连线符号</h3><table><thead><tr><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\fbox{a+b+c+d}</td><td align="center">$\fbox{a+b+c+d}$</td></tr><tr><td align="center">\overleftarrow{a+b+c+d}</td><td align="center">$\overleftarrow{a+b+c+d}$</td></tr><tr><td align="center">\overrightarrow{a+b+c+d}</td><td align="center">$\overrightarrow{a+b+c+d}$</td></tr><tr><td align="center">\overleftrightarrow{a+b+c+d}</td><td align="center">$\overleftrightarrow{a+b+c+d}$</td></tr><tr><td align="center">\underleftarrow{a+b+c+d}</td><td align="center">$\underleftarrow{a+b+c+d}$</td></tr><tr><td align="center">\underrightarrow{a+b+c+d}</td><td align="center">$\underrightarrow{a+b+c+d}$</td></tr><tr><td align="center">\underleftrightarrow{a+b+c+d}</td><td align="center">$\underleftrightarrow{a+b+c+d}$</td></tr><tr><td align="center">\overline{a+b+c+d}</td><td align="center">$\overline{a+b+c+d}$</td></tr><tr><td align="center">\underline{a+b+c+d}</td><td align="center">$\underline{a+b+c+d}$</td></tr><tr><td align="center">\overbrace{a+b+c+d}^{Sample}</td><td align="center">$\overbrace{a+b+c+d}^{Sample}$</td></tr><tr><td align="center">\underbrace{a+b+c+d}_{Sample}</td><td align="center">$\underbrace{a+b+c+d}_{Sample}$</td></tr><tr><td align="center">\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}</td><td align="center">$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$</td></tr><tr><td align="center">\underbrace{a\cdot a\cdots a}_{b\text{ times}}</td><td align="center">$\underbrace{a\cdot a\cdots a}_{b\text{ times}}$</td></tr></tbody></table><h3 id="9-．箭头符号"><a href="#9-．箭头符号" class="headerlink" title="(9)．箭头符号"></a>(9)．箭头符号</h3><ul><li>推荐使用符号：  <table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\to</td><td align="center">$\to$</td><td align="center">\mapsto</td><td align="center">$\mapsto$</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\implies</td><td align="center">$\implies$</td><td align="center">\iff</td><td align="center">$\iff$</td><td align="center">\impliedby</td><td align="center">$\impliedby$</td></tr></tbody></table></li></ul><ul><li>其它可用符号：  </li></ul><table><thead><tr><th align="center">输入</th><th align="center">显示</th><th align="center">输入</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\uparrow</td><td align="center">$\uparrow$</td><td align="center">\Uparrow</td><td align="center">$\Uparrow$</td></tr><tr><td align="center">\downarrow</td><td align="center">$\downarrow$</td><td align="center">\Downarrow</td><td align="center">$\Downarrow$</td></tr><tr><td align="center">\leftarrow</td><td align="center">$\leftarrow$</td><td align="center">\Leftarrow</td><td align="center">$\Leftarrow$</td></tr><tr><td align="center">\rightarrow</td><td align="center">$\rightarrow$</td><td align="center">\Rightarrow</td><td align="center">$\Rightarrow$</td></tr><tr><td align="center">\leftrightarrow</td><td align="center">$\leftrightarrow$</td><td align="center">\Leftrightarrow</td><td align="center">$\Leftrightarrow$</td></tr><tr><td align="center">\longleftarrow</td><td align="center">$\longleftarrow$</td><td align="center">\Longleftarrow</td><td align="center">$\Longleftarrow$</td></tr><tr><td align="center">\longrightarrow</td><td align="center">$\longrightarrow$</td><td align="center">\Longrightarrow</td><td align="center">$\Longrightarrow$</td></tr><tr><td align="center">\longleftrightarrow</td><td align="center">$\longleftrightarrow$</td><td align="center">\Longleftrightarrow</td><td align="center">$\Longleftrightarrow$</td></tr></tbody></table><h2 id="13．进行字体转换"><a href="#13．进行字体转换" class="headerlink" title="13．进行字体转换"></a>13．进行字体转换</h2><p>若要对公式的某一部分字符进行字体转换，可以用 <code>{\字体 {需转换的部分字符}}</code> 命令，其中 <code>\字体</code> 部分可以参照下表选择合适的字体。一般情况下，公式默认为意大利体 $italic$ 。</p><p>示例中 <strong>全部大写</strong> 的字体仅大写可用。  </p><table><thead><tr><th align="center">输入</th><th align="center">说明</th><th align="center">显示</th><th align="center">输入</th><th align="center">说明</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\rm</td><td align="center">罗马体</td><td align="center">$\rm{Sample}$</td><td align="center">\cal</td><td align="center">花体</td><td align="center">$\cal{SAMPLE}$</td></tr><tr><td align="center">\it</td><td align="center">意大利体</td><td align="center">$\it{Sample}$</td><td align="center">\Bbb</td><td align="center">黑板粗体</td><td align="center">$\Bbb{SAMPLE}$</td></tr><tr><td align="center">\bf</td><td align="center">粗体</td><td align="center">$\bf{Sample}$</td><td align="center">\mit</td><td align="center">数学斜体</td><td align="center">$\mit{SAMPLE}$</td></tr><tr><td align="center">\sf</td><td align="center">等线体</td><td align="center">$\sf{Sample}$</td><td align="center">\scr</td><td align="center">手写体</td><td align="center">$\scr{SAMPLE}$</td></tr><tr><td align="center">\tt</td><td align="center">打字机体</td><td align="center">$\tt{Sample}$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\frak</td><td align="center">旧德式字体</td><td align="center">$\frak{Sample}$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>转换字体十分常用，例如在积分中：</p><ul><li><p>例子：</p><pre class=" language-java"><code class="language-java">\begin<span class="token punctuation">{</span>array<span class="token punctuation">}</span><span class="token punctuation">{</span>cc<span class="token punctuation">}</span>\mathrm<span class="token punctuation">{</span>Bad<span class="token punctuation">}</span> <span class="token operator">&amp;</span> \mathrm<span class="token punctuation">{</span>Better<span class="token punctuation">}</span> \\\hline \\\int_0<span class="token operator">^</span><span class="token number">1</span> x<span class="token operator">^</span><span class="token number">2</span> dx <span class="token operator">&amp;</span> \int_0<span class="token operator">^</span><span class="token number">1</span> x<span class="token operator">^</span><span class="token number">2</span> \<span class="token punctuation">,</span><span class="token punctuation">{</span>\rm d<span class="token punctuation">}</span>x\end<span class="token punctuation">{</span>array<span class="token punctuation">}</span></code></pre></li><li><p>显示：<br>$$\begin{array}{cc}\mathrm{Bad}&amp;\mathrm{Better}\\hline \\int_0^1 x^2 dx&amp;\int_0^1 x^2 ,{\rm d}x\end{array}$$</p></li></ul><p>注意比较两个式子间 $dx$ 与 ${\rm d} x$ 的不同。<br>使用 <code>\operatorname</code> 命令也可以达到相同的效果。</p><h2 id="14．大括号和行标的使用"><a href="#14．大括号和行标的使用" class="headerlink" title="14．大括号和行标的使用"></a>14．大括号和行标的使用</h2><p>使用 <code>\left</code> 和 <code>\right</code> 来创建自动匹配高度的 (圆括号)，[方括号] 和 {花括号} 。<br>在每个公式末尾前使用 <code>\tag{行标}</code> 来实现行标。</p><ul><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$f\<span class="token function">left</span><span class="token punctuation">(</span> \left<span class="token punctuation">[</span>    \frac<span class="token punctuation">{</span>     <span class="token number">1</span><span class="token operator">+</span>\left\<span class="token punctuation">{</span>x<span class="token punctuation">,</span>y\right\<span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">{</span>     \<span class="token function">left</span><span class="token punctuation">(</span>        \frac<span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token operator">+</span>\frac<span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span>     \right<span class="token punctuation">)</span>     \<span class="token function">left</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span>\right<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token operator">+</span>a \right<span class="token punctuation">]</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">}</span>\right<span class="token punctuation">)</span>\tag<span class="token punctuation">{</span>行标<span class="token punctuation">}</span>$$</code></pre></li><li><p>显示：</p></li></ul><p><img src="/images/pasted-19.png" alt="生成失败"><br>如果你需要在不同的行显示对应括号，可以在每一行对应处使用 <code>\left.</code> 或 <code>\right.</code> 来放一个”影子”括号：</p><ul><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$\begin<span class="token punctuation">{</span>aligned<span class="token punctuation">}</span>a<span class="token operator">=</span><span class="token operator">&amp;</span>\<span class="token function">left</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">+</span>  \cdots \right<span class="token punctuation">.</span> \\<span class="token operator">&amp;</span> \cdots<span class="token operator">+</span> \left<span class="token punctuation">.</span> \infty<span class="token operator">-</span><span class="token number">2</span><span class="token operator">+</span>\infty<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>\infty\right<span class="token punctuation">)</span>\end<span class="token punctuation">{</span>aligned<span class="token punctuation">}</span>$$</code></pre></li><li><p>显示：<br>$$<br>\begin{aligned}<br>a=&amp;\left(1+2+3+  \cdots \right. \<br>&amp; \cdots+ \left. \infty-2+\infty-1+\infty\right)<br>\end{aligned}<br>$$</p></li></ul><p>如果你需要将行内显示的分隔符也变大，可以使用 <code>\middle</code> 命令：</p><ul><li><p>例子：</p><pre class=" language-java"><code class="language-java">$$\left\langle  q\middle\<span class="token operator">|</span>\frac<span class="token punctuation">{</span>\frac<span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span>\frac<span class="token punctuation">{</span>u<span class="token punctuation">}</span><span class="token punctuation">{</span>v<span class="token punctuation">}</span><span class="token punctuation">}</span>\middle<span class="token operator">|</span>  p \right\rangle$$</code></pre></li><li><p>显示：<br>$$<br>\left\langle<br>q<br>\middle|<br>\frac{\frac{x}{y}}{\frac{u}{v}}<br>\middle|<br> p<br>\right\rangle<br>$$</p></li></ul><p>不鸡儿写了 这些够我用了</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个c++版的遗传算法</title>
      <link href="/2019/08/03/%E6%94%B9%E7%BC%96%E7%89%88%E7%9A%84c-%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
      <url>/2019/08/03/%E6%94%B9%E7%BC%96%E7%89%88%E7%9A%84c-%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>适用于作业车间调度问题，就当在这保存一下，毕竟弄了挺久的，java版的在github上，要的记几去看吧。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> population_number <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> times <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> N <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">int</span> machine<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//机器数量</span><span class="token keyword">int</span> job<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//工件数量</span><span class="token keyword">int</span> process<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//任务总数</span><span class="token keyword">int</span> chromosome_size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//染色体长度</span><span class="token keyword">const</span> <span class="token keyword">class</span> <span class="token class-name">Probability</span>          <span class="token comment" spellcheck="true">//概率</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> cross <span class="token operator">=</span> <span class="token number">0.95</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//交叉概率</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> mutation <span class="token operator">=</span> <span class="token number">0.05</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//变异概率</span><span class="token punctuation">}</span> probability<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Matrix</span>                <span class="token comment" spellcheck="true">//矩阵</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> Machine<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//job process => machine</span>    <span class="token keyword">int</span> Time<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//job process => time</span>    <span class="token keyword">int</span> Process<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//job machine => process</span>    <span class="token function">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Machine<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                Process<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> matrix<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Gene</span>       <span class="token comment" spellcheck="true">//基因</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string chromosome<span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">(</span>job <span class="token operator">*</span> machine<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//染色体</span>    <span class="token keyword">int</span> fitness <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                    <span class="token comment" spellcheck="true">//适应度</span>    <span class="token function">Gene</span><span class="token punctuation">(</span><span class="token keyword">int</span> fitness<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>fitness <span class="token operator">=</span> fitness<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Gene</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Gene</span><span class="token punctuation">(</span><span class="token keyword">const</span> Gene <span class="token operator">&amp;</span>other<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        chromosome <span class="token operator">=</span> other<span class="token punctuation">.</span>chromosome<span class="token punctuation">;</span>        fitness <span class="token operator">=</span> other<span class="token punctuation">.</span>fitness<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Gene <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> chromosome <span class="token operator">==</span> other<span class="token punctuation">.</span>chromosome <span class="token operator">&amp;&amp;</span> fitness <span class="token operator">==</span> other<span class="token punctuation">.</span>fitness<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Gene <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> chromosome <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>chromosome<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Gene<span class="token operator">></span> populations<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//种群</span><span class="token keyword">class</span> <span class="token class-name">Store</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> machineWorkTime<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//机器工作时间</span>    <span class="token keyword">int</span> processIds<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//对应任务的工序</span>    <span class="token keyword">int</span> endTime<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//job process => endtime</span>    <span class="token keyword">int</span> startTime<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//job process => starttime</span>    <span class="token function">Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 产生 start到end的随机整数 * @param start * @param end * @return */</span><span class="token comment" spellcheck="true">/*long randint(long start, long end){    return rand() % (end - start + 1) + start;}*/</span><span class="token comment" spellcheck="true">/** * 产生 0 到 end的随机整数 * @param end * @return */</span><span class="token keyword">long</span> <span class="token function">randint</span><span class="token punctuation">(</span><span class="token keyword">long</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * char => int * @param ch * @return */</span><span class="token keyword">int</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** *int => char * @param i * @return */</span><span class="token keyword">char</span> <span class="token function">Char</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 将vector填充整数 * @param v * @param length * @param except */</span><span class="token keyword">void</span> <span class="token function">generateVector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 计算适应度 * @param gene * @param store */</span><span class="token keyword">void</span> <span class="token function">calculateFitness</span><span class="token punctuation">(</span>Gene <span class="token operator">&amp;</span>gene<span class="token punctuation">,</span> Store <span class="token operator">&amp;</span>store<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fulfillTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>gene<span class="token punctuation">.</span>chromosome<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> jobId <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span>gene<span class="token punctuation">.</span>chromosome<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>            processId <span class="token operator">=</span> store<span class="token punctuation">.</span>processIds<span class="token punctuation">[</span>jobId<span class="token punctuation">]</span><span class="token punctuation">,</span>            machineId <span class="token operator">=</span> matrix<span class="token punctuation">.</span>Machine<span class="token punctuation">[</span>jobId<span class="token punctuation">]</span><span class="token punctuation">[</span>processId<span class="token punctuation">]</span><span class="token punctuation">,</span>            time <span class="token operator">=</span> matrix<span class="token punctuation">.</span>Time<span class="token punctuation">[</span>jobId<span class="token punctuation">]</span><span class="token punctuation">[</span>processId<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;">> "&lt;&lt; jobId &lt;&lt; " " &lt;&lt; processId &lt;&lt; " " &lt;&lt; machineId &lt;&lt; " " &lt;&lt; time&lt;&lt;endl;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>machineId<span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            store<span class="token punctuation">.</span>processIds<span class="token punctuation">[</span>jobId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            store<span class="token punctuation">.</span>startTime<span class="token punctuation">[</span>jobId<span class="token punctuation">]</span><span class="token punctuation">[</span>processId<span class="token punctuation">]</span> <span class="token operator">=</span> processId <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> store<span class="token punctuation">.</span>machineWorkTime<span class="token punctuation">[</span>machineId<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">max</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>endTime<span class="token punctuation">[</span>jobId<span class="token punctuation">]</span><span class="token punctuation">[</span>processId <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>machineWorkTime<span class="token punctuation">[</span>machineId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            store<span class="token punctuation">.</span>machineWorkTime<span class="token punctuation">[</span>machineId<span class="token punctuation">]</span> <span class="token operator">=</span> store<span class="token punctuation">.</span>startTime<span class="token punctuation">[</span>jobId<span class="token punctuation">]</span><span class="token punctuation">[</span>processId<span class="token punctuation">]</span> <span class="token operator">+</span> time<span class="token punctuation">;</span>            store<span class="token punctuation">.</span>endTime<span class="token punctuation">[</span>jobId<span class="token punctuation">]</span><span class="token punctuation">[</span>processId<span class="token punctuation">]</span> <span class="token operator">=</span> store<span class="token punctuation">.</span>machineWorkTime<span class="token punctuation">[</span>machineId<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>machineWorkTime<span class="token punctuation">[</span>machineId<span class="token punctuation">]</span> <span class="token operator">></span> fulfillTime<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                fulfillTime <span class="token operator">=</span> store<span class="token punctuation">.</span>machineWorkTime<span class="token punctuation">[</span>machineId<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    gene<span class="token punctuation">.</span>fitness <span class="token operator">=</span> fulfillTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 初始化种群 * @param genes * @param population */</span><span class="token keyword">void</span> <span class="token function">initializePopulation</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Gene<span class="token operator">></span> <span class="token operator">&amp;</span>genes<span class="token punctuation">,</span> <span class="token keyword">int</span> population<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>Gene<span class="token operator">></span> gs<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> population<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> index_list<span class="token punctuation">;</span>        <span class="token function">generateVector</span><span class="token punctuation">(</span>index_list<span class="token punctuation">,</span> job <span class="token operator">*</span> machine<span class="token punctuation">)</span><span class="token punctuation">;</span>        Gene gene<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> job<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> machine<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">long</span> index <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> value <span class="token operator">=</span> index_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                index_list<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>Process<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//cout&lt;&lt;gene.chromosome&lt;&lt;endl;</span>                    gene<span class="token punctuation">.</span>chromosome<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Char</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">remove_if</span><span class="token punctuation">(</span>gene<span class="token punctuation">.</span>chromosome<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gene<span class="token punctuation">.</span>chromosome<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gene<span class="token punctuation">.</span>chromosome<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">(</span>chromosome_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Store store<span class="token punctuation">;</span>        <span class="token function">calculateFitness</span><span class="token punctuation">(</span>gene<span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;gene.fitness&lt;&lt;endl;</span>        gs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>gene<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>Gene<span class="token operator">></span><span class="token operator">::</span>iterator ite <span class="token operator">=</span> gs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ite <span class="token operator">!=</span> gs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        genes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>ite<span class="token punctuation">)</span><span class="token punctuation">;</span>        ite<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 基因突变 * @param gene * @param n */</span><span class="token keyword">void</span> <span class="token function">geneticMutation</span><span class="token punctuation">(</span>Gene <span class="token operator">&amp;</span>gene<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> index_list<span class="token punctuation">;</span>    <span class="token function">generateVector</span><span class="token punctuation">(</span>index_list<span class="token punctuation">,</span> chromosome_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">long</span> first <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index_list<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> second <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Store store<span class="token punctuation">;</span>    <span class="token function">calculateFitness</span><span class="token punctuation">(</span>gene<span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 基因交叉 * @param first * @param second * @return */</span>pair<span class="token operator">&lt;</span>Gene<span class="token punctuation">,</span> Gene<span class="token operator">></span> <span class="token function">orderCrossover</span><span class="token punctuation">(</span>Gene <span class="token operator">&amp;</span>first<span class="token punctuation">,</span> Gene <span class="token operator">&amp;</span>second<span class="token punctuation">)</span><span class="token punctuation">{</span>    function<span class="token operator">&lt;</span><span class="token function">Gene</span><span class="token punctuation">(</span>Gene <span class="token operator">&amp;</span><span class="token punctuation">,</span> Gene <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">></span> generateChild <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Gene <span class="token operator">&amp;</span>first<span class="token punctuation">,</span> Gene <span class="token operator">&amp;</span>second<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Gene    <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> index_list<span class="token punctuation">;</span>        <span class="token function">generateVector</span><span class="token punctuation">(</span>index_list<span class="token punctuation">,</span> chromosome_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index_list<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string middle <span class="token operator">=</span> first<span class="token punctuation">.</span>chromosome<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">,</span>        t <span class="token operator">=</span> middle<span class="token punctuation">,</span>        k <span class="token operator">=</span> second<span class="token punctuation">.</span>chromosome<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">&amp;</span>it <span class="token operator">:</span> t<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> it<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    k<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Gene child<span class="token punctuation">;</span>        child<span class="token punctuation">.</span>chromosome <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> middle <span class="token operator">+</span> k<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> k<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        Store store<span class="token punctuation">;</span>        <span class="token function">calculateFitness</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> child<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    pair<span class="token operator">&lt;</span>Gene<span class="token punctuation">,</span> Gene<span class="token operator">></span> child<span class="token punctuation">;</span>    child<span class="token punctuation">.</span>first <span class="token operator">=</span> <span class="token function">generateChild</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>    child<span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">generateChild</span><span class="token punctuation">(</span>second<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> child<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 选择个体 * @param n * @return */</span>Gene <span class="token function">selectIndividual</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> index_list<span class="token punctuation">;</span>    <span class="token function">generateVector</span><span class="token punctuation">(</span>index_list<span class="token punctuation">,</span> population_number<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Gene<span class="token operator">></span> simple<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">long</span> index <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index_list<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>index_list<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        simple<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>populations<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Gene <span class="token function">best_gene</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>simple<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fitness <span class="token operator">&lt;</span> best_gene<span class="token punctuation">.</span>fitness<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            best_gene <span class="token operator">=</span> simple<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> best_gene<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//srand(static_cast&lt;int>(time(nullptr)));</span>    chromosome_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"input job and machine:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> job <span class="token operator">>></span> machine<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> job<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"input job"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" process:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> p<span class="token punctuation">;</span>        chromosome_size <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> process <span class="token operator">=</span> p<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"input machine and time:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> m<span class="token punctuation">,</span> t<span class="token punctuation">;</span>            cin <span class="token operator">>></span> m <span class="token operator">>></span> t<span class="token punctuation">;</span>            matrix<span class="token punctuation">.</span>Machine<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>            matrix<span class="token punctuation">.</span>Time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> job<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> process<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>Machine<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                matrix<span class="token punctuation">.</span>Process<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>Machine<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">initializePopulation</span><span class="token punctuation">(</span>populations<span class="token punctuation">,</span> population_number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化种群</span>    <span class="token keyword">long</span> n <span class="token operator">=</span> times<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cout &lt;&lt; "n = " &lt;&lt; n &lt;&lt; endl;</span>        <span class="token keyword">double</span> P <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P <span class="token operator">&lt;</span> probability<span class="token punctuation">.</span>mutation<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">long</span> index <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span>populations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">geneticMutation</span><span class="token punctuation">(</span>populations<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">long</span> size <span class="token operator">=</span> populations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> m <span class="token operator">=</span> size <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>            vector<span class="token operator">&lt;</span>Gene<span class="token operator">></span> children<span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>populations<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> populations<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> Gene <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> Gene <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>fitness <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>fitness<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>populations<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> populations<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Gene <span class="token function">best_gene</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>it <span class="token operator">:</span> populations<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"chromosome = "</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>chromosome <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>fitness <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>best_gene<span class="token punctuation">.</span>fitness <span class="token operator">></span> it<span class="token punctuation">.</span>fitness<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            best_gene <span class="token operator">=</span> it<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Store store<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"result = "</span> <span class="token operator">&lt;&lt;</span> best_gene<span class="token punctuation">.</span>chromosome <span class="token operator">&lt;&lt;</span> <span class="token string">" time = "</span> <span class="token operator">&lt;&lt;</span> best_gene<span class="token punctuation">.</span>fitness <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">calculateFitness</span><span class="token punctuation">(</span>best_gene<span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> machine<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"machine"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" work time "</span> <span class="token operator">&lt;&lt;</span> store<span class="token punctuation">.</span>machineWorkTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> job<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> process<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>Machine<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"job"</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">" process"</span> <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> <span class="token string">" machine"</span> <span class="token operator">&lt;&lt;</span> matrix<span class="token punctuation">.</span>Machine<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" start time="</span>                     <span class="token operator">&lt;&lt;</span> store<span class="token punctuation">.</span>startTime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" end time="</span> <span class="token operator">&lt;&lt;</span> store<span class="token punctuation">.</span>endTime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>C++11下可直接运行，下面有几组测试用例：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token number">3</span> <span class="token number">3</span><span class="token number">3</span><span class="token number">0</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">2</span><span class="token number">3</span><span class="token number">0</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">4</span><span class="token number">2</span><span class="token number">1</span> <span class="token number">4</span><span class="token number">2</span> <span class="token number">3</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">4</span> <span class="token number">3</span><span class="token number">3</span><span class="token number">0</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">2</span><span class="token number">3</span><span class="token number">0</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">4</span><span class="token number">2</span><span class="token number">1</span> <span class="token number">4</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">2</span><span class="token number">1</span> <span class="token number">3</span><span class="token number">2</span> <span class="token number">1</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">5</span> <span class="token number">4</span><span class="token number">3</span><span class="token number">1</span>  <span class="token number">3</span><span class="token number">2</span>  <span class="token number">4</span><span class="token number">3</span>  <span class="token number">1</span><span class="token number">2</span><span class="token number">1</span>  <span class="token number">2</span><span class="token number">0</span>  <span class="token number">1</span><span class="token number">3</span><span class="token number">0</span>  <span class="token number">2</span><span class="token number">3</span>  <span class="token number">1</span><span class="token number">1</span>  <span class="token number">1</span><span class="token number">1</span><span class="token number">3</span>  <span class="token number">3</span><span class="token number">3</span><span class="token number">0</span>  <span class="token number">1</span><span class="token number">2</span>  <span class="token number">2</span><span class="token number">1</span>  <span class="token number">4</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round #574 (Div. 2)</title>
      <link href="/2019/08/02/Codeforces-Round-574-Div-2/"/>
      <url>/2019/08/02/Codeforces-Round-574-Div-2/</url>
      
        <content type="html"><![CDATA[<h2 id="A-Drinks-Choosing"><a href="#A-Drinks-Choosing" class="headerlink" title="A. Drinks Choosing"></a>A. Drinks Choosing</h2><p>有n个学生，k种饮料，a1~ai是第i个学生最喜欢的饮料，可以订n/2箱饮料，一箱两瓶，一人一瓶，如果多出来饮料则由老师喝掉，问学生喝到自己喜欢饮料的最大人数是多少？<br><strong>思路</strong>：记录喜欢每个口味的人数，然后以2为基数往下减，最后剩下一堆1人的情况，满足一半即可。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bits/stdc++.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        cnt <span class="token operator">+</span><span class="token operator">=</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ans <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="B-Sport-Mafia"><a href="#B-Sport-Mafia" class="headerlink" title="B. Sport Mafia"></a>B. Sport Mafia</h2><p>要求用恰好n次操作使最终糖果数为k，操作规则：<br>1.加入数量为上一次加入糖果+1的糖果。<br>2.吃掉一个糖果<br>问一共吃掉多少糖果？<br><strong>思路</strong>：假设放了 $m$次糖果，那么吃糖果的次数q为 $q=n-m$ 。<br>则有公式：$k+q=((m+1)\times m)/2$<br>化简得：$m\times (m+3)=2\times(n+k)$<br>复杂度$O(\sqrt[2]{n+k})$ 可直接搜索</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bits/stdc++.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">*</span>i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>n<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token punctuation">(</span>n<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans <span class="token operator">=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="C-Basketball-Exercise"><a href="#C-Basketball-Exercise" class="headerlink" title="C. Basketball Exercise"></a>C. Basketball Exercise</h2><p>有两排人每排n个，从左到右为1 - n, 然后从中选出任意个人，但是又一定的规则<br>1.连续的两个人不能再同一行<br>2.下一个人的下标一定要比前一个大<br>问能选出来的人的身高最多又多大？<br><strong>思路</strong>：典型的动态规划，线性跑一遍维护最大值即可<br>状态转移方程：<br>$dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + a[i])$<br>$dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + b[i])$</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bits/stdc++.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="D1-Submarine-in-the-Rybinsk-Sea-easy-edition"><a href="#D1-Submarine-in-the-Rybinsk-Sea-easy-edition" class="headerlink" title="D1. Submarine in the Rybinsk Sea (easy edition)"></a>D1. Submarine in the Rybinsk Sea (easy edition)</h2><p>定义拼接函数<br>$f(a_1a_2…a_p,b_1b_2…b_q):$<br>$f(a_1…ap,b1…b_q)=\lbrace a_1a_2…a_{p-q+1}b_1a_{p-q+2}b_2…a_{p-1}b_{q-1}a_qb_p\rbrace    \tag{p≤q}$<br>$f(a_1…ap,b1…b_q)=\lbrace b_1b_2…b_{p-q}a_1b_{p-q+1}a_2…a_{p-1}b_{q-1}a_pb_q\rbrace    \tag{p&lt;q}$<br><strong>思路</strong>：ai位数相同，分别计算贡献即可。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bits/stdc++.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">100004</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> base <span class="token operator">*</span> <span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            ans <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">100LL</span><span class="token punctuation">;</span>            base <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>            temp <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> base <span class="token operator">*</span> <span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            ans <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">100LL</span><span class="token punctuation">;</span>            base <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>            temp <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">*</span> n <span class="token operator">%</span> mod <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="E-OpenStreetMap"><a href="#E-OpenStreetMap" class="headerlink" title="E. OpenStreetMap"></a>E. OpenStreetMap</h2><p>给了一种矩阵构造方式，在构造完后的矩阵中，要求所有大小为$a\times 0$的子矩阵的最小值的和。<br><strong>思路</strong>：好像很容易想到二维RMQ，但是我忘了咋写了(后来验证空间不够开，是种错误想法)，于是寻找另一种方案，发现$a\times b$的子矩阵是固定大小，那么从基础矩阵出发，可以进行如下操作：<br>例如，对于n=5 m=5 a=2 b=2<br>矩阵为：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span> <span class="token number">5</span> <span class="token number">13</span> <span class="token number">29</span> <span class="token number">2</span><span class="token number">7</span> <span class="token number">17</span> <span class="token number">37</span> <span class="token number">18</span> <span class="token number">39</span><span class="token number">22</span> <span class="token number">47</span> <span class="token number">38</span> <span class="token number">20</span> <span class="token number">43</span><span class="token number">30</span> <span class="token number">4</span> <span class="token number">11</span> <span class="token number">25</span> <span class="token number">53</span><span class="token number">50</span> <span class="token number">44</span> <span class="token number">32</span> <span class="token number">8</span> <span class="token number">19</span></code></pre><p>子矩阵为$2\times 2$，对于每行数据，2个为一组，取最小的，得到如下矩阵：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span>  <span class="token number">5</span>  <span class="token number">13</span> <span class="token number">2</span><span class="token number">7</span>  <span class="token number">17</span> <span class="token number">18</span> <span class="token number">18</span><span class="token number">22</span> <span class="token number">38</span> <span class="token number">20</span> <span class="token number">20</span><span class="token number">4</span>  <span class="token number">4</span>  <span class="token number">11</span> <span class="token number">25</span><span class="token number">44</span> <span class="token number">32</span> <span class="token number">8</span>  <span class="token number">8</span></code></pre><p>在对于每列数据，2个为一组，同上操作：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span> <span class="token number">5</span>  <span class="token number">13</span> <span class="token number">2</span><span class="token number">7</span> <span class="token number">17</span> <span class="token number">18</span> <span class="token number">18</span><span class="token number">4</span> <span class="token number">4</span>  <span class="token number">11</span> <span class="token number">20</span><span class="token number">4</span> <span class="token number">4</span>  <span class="token number">8</span>  <span class="token number">8</span></code></pre><p>如此我们得到了一个$n-a+1\times m-b+1$的矩阵，加和即可，每一位代表其子矩阵的最小值，其中使用双端队列维护区间最小值。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bits/stdc++.h"</span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>LL g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">3002</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3002</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">3002</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">;</span>            g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">*</span> g <span class="token operator">*</span> x <span class="token operator">%</span> z <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">%</span> z<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">{</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">>=</span> j <span class="token operator">+</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">{</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">>=</span> i <span class="token operator">+</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m <span class="token operator">-</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforce </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对Matery主题的Hexo搭建中的常见问(keng)题(dian)</title>
      <link href="/2019/07/30/exo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE-keng-%E9%A2%98-dian/"/>
      <url>/2019/07/30/exo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE-keng-%E9%A2%98-dian/</url>
      
        <content type="html"><![CDATA[<p>对于我这种不会前端的人来说，搭个博客真是快死了，总结一下几天以来遇到过的问题和解决方案。   </p><h2 id="代码高亮问题"><a href="#代码高亮问题" class="headerlink" title="代码高亮问题"></a>代码高亮问题</h2><p>一开始没有熟练掌握markdown语法，没有写出高亮效果，一直以为是插件配置问题，后来发现了一个同样问题的仁兄，是格式问题，正确提供高亮markdown会根据你输入的语言模式来进行匹配，比如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要在代码头部加入对应语言，即可解决</p><pre><code>```javapublic class main(){    int a = 2;   double b = 0.2;}```</code></pre><p>这样就对了</p><h2 id="底部访问数问题"><a href="#底部访问数问题" class="headerlink" title="底部访问数问题"></a>底部访问数问题</h2><p>在没有使用matery主题前，使用yilia主题搭建成功后出于好玩加入了看板娘，毕竟我也是个萝莉控，后搭建matery开启访问统计时，发现底部显示时而好使时而不好使，开启F12检查后发现如下：</p><p><img src="/images/pasted-3.png" alt="谷歌F12检查内容"><br>虽然我对前端不感冒，但是还是明白那个style = “display: none” 不是个好东西，后来查了查，定义如下：<br><strong>1.display 属性设置或返回元素的显示类型。<br>2.HTML 中的元素大多是”内联”或”块”元素：一个内联元素，在其左侧和右侧都是浮动内容。一个块元素填满整个行，并没有什么可显示在其左侧或右侧。<br>3.display 属性还允许作者显示或隐藏一个元素。与 visibility 属性类似。然而，如果您设置 display:none，将隐藏整个元素。</strong><br>MMP，给我隐藏了，好家伙，然后气急败坏的我去footer.ejs文件中寻找源头，源码位置：layout_partial\footer.ejs，把代码改成了如下样子：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>     站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">inline-size</span><span class="token punctuation">:</span> </span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>     次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">inline-size</span><span class="token punctuation">:</span> </span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>图样图森泡，我以为改了style值就能解决问题，然而没有一点用处。<br>后经过IDE的启发，输入<code>&lt;span&gt;</code>标签时候，一般会自动马上后面补上<code>&lt;/span&gt;</code>，一时灵感把代码改成如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>     本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>     次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>改变了<code>&lt;/span&gt;</code>的位置，解决了问题，<code>&lt;span&gt;</code>在html的定义如下：<br><strong>1.<code>&lt;span&gt;</code> 用于对文档中的行内元素进行组合。<br>2.<code>&lt;span&gt;</code>标签没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。如果不对 <code>&lt;span&gt;</code> 应用样式，那么 <code>&lt;span&gt;</code> 元素中的文本与其他文本不会任何视觉上的差异。<br>3.<code>&lt;span&gt;</code> 标签提供了一种将文本的一部分或者文档的一部分独立出来的方式。</strong><br>wdnmd，阴差阳错解决了问题，但是还是不明白原理，按我理解来看，相当于id的值在之前被看板娘的介入在生成时被当做干扰因素给隐藏了，这样写标签相当于强调了一下id的独立性，不被其他元素所干扰。还有一种说法，是主题建设者的失误…也不知道对不对，但是给我的感觉是这样的，希望能有大神指点迷津。<br>同样的，在文章开头的阅读数量出现了同样问题，检查：</p><p><img src="/images/pasted-11.png" alt="F12检查"><br>得，一样的问题，源码位置layout_partial\post-detail.ejs,对应代码位置：</p><p><img src="/images/pasted-13.png" alt="阅读数源码"><br>更改稍微不同，需要把id从div中提出来，在下面另起span标签，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info-break-policy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-eye fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('readCount')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>:<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><h2 id="配色问题"><a href="#配色问题" class="headerlink" title="配色问题"></a>配色问题</h2><p>在尝试改变背景配色时，学到了一种CSS语法，可以进行颜色渐变搭配，炫酷的一批。<br>CSS语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>direction,color-stop<span class="token number">1</span>,color-stop<span class="token number">2</span>,<span class="token number">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>direction：用角度值指定渐变的方向，可有上下左右搭配组合。<br>color-stop1,color-stop2,…：用于指定渐变的起止颜色。  </p><p>环境：</p><pre class=" language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>red,yellow,blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Safari 5.1-6.0 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>red,yellow,blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Opera 11.1-12.0 */</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>red,yellow,blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Firefox 3.6-15 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>red,yellow,blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 标准语法 */</span></code></pre><p>1、background: linear-gradient(to left,#d3959b,#bfe6ba);<br>to left 设置渐变从右到左</p><p><img src="/images/pasted-10.png" alt="#d3959b→#bfe6ba"><br><img src="/images/pasted-4.png" alt="to left"></p><p>2、background: linear-gradient(to top right,#d3959b,#bfe6ba);<br>to right top = to top right ：从左下角到右上角，对角线角度</p><p><img src="/images/pasted-5.png" alt="to top right"></p><p>3、background: linear-gradient(45deg,#d3959b 20%,#bfe6ba);<br>用百分比指定起始颜色的位置，默认值为0%；</p><p><img src="/images/pasted-6.png" alt="45 deg 20%"></p><p>4、background: linear-gradient(to right,#feac5e,#c779d0,#4bc0c8);<br>三种颜色渐进</p><p><img src="/images/pasted-9.png" alt="#feac5e→#c779d0→#4bc0c8"><br><img src="/images/pasted-7.png" alt="three color"></p><p>5、background: linear-gradient(45deg,rgba(254,172,94,0.5),rgba(199,121,208,0.5),rgba(75,192,200,0.5));<br>增加透明度</p><p><img src="/images/pasted-8.png" alt="three color 0.5"></p><p>本站使用样例4，还有部署到git后，对于颜色的延迟会很大，耐心等待一阵子即可。   </p><h2 id="评论问题"><a href="#评论问题" class="headerlink" title="评论问题"></a>评论问题</h2><p>本站使用Gitalk模块，先是去github里注册个Application，长这个样子：</p><p><img src="/images/pasted-12.png" alt="Oavth app"></p><p>配置完相关Yml后，就是一个经常出现的问题，没有初始化评论仓库，在评论模块暂时会显示这样：</p><p><img src="/images/pasted-14.png" alt="未初始化"><br>可是点击登录并没有按正常情况跳转登录界面，而是返回了主页，而且可以发现，主页地址很jr复杂：</p><pre class=" language-bash"><code class="language-bash">https://www.fanfff.cn/?error<span class="token operator">=</span>redirect_uri_mismatch<span class="token operator">&amp;</span>error_description<span class="token operator">=</span>The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.<span class="token operator">&amp;</span>error_uri<span class="token operator">=</span>https%3A%2F%2Fdeveloper.github.com%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch</code></pre><p>好奇心使我死亡，但是无奈我看不懂这一串乱七八糟的东西，一气之下去翻了一下<a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/" target="_blank" rel="noopener">github文档</a>，还好比英语阅读题简单看一点，我找到了可能解释这个问题的地方：</p><p><img src="/images/pasted-15.png" alt="文档内容"><br>意思是链接不匹配就会跳转会我设置的主页，于是乎检查了一下所有有关Gitalk的配置文件中的地址，最后、、、、、、我就自闭了<br><img src="/images/pasted-12.png" alt="Oavth app"><br>嘿嘿，在使用F12检查login的回调地址，全是redirect_uri https:开头，我写了个http、、、</p><p><img src="/images/pasted-16.png" alt="不想说话"></p><h2 id="hexo-admin使用问题"><a href="#hexo-admin使用问题" class="headerlink" title="hexo admin使用问题"></a>hexo admin使用问题</h2><p>admin可以直接复制图片到编辑板然后自动放在对应文件夹下的功能是不错，但是一般复制过来之后的图片调用一般都是这个形式</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">(</span>\\images\pasted-0.png\<span class="token punctuation">)</span></code></pre><p>额…把前后的\去掉就可以在界面实时显示图片，这样</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">(</span>\images\pasted-0.png<span class="token punctuation">)</span></code></pre><p>但是嘞，部署后就不显示了，把\改成/就可以，是啥意思嘛？？？</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">(</span>/images/pasted-0.png<span class="token punctuation">)</span></code></pre><p>也不到是我自己问题还是框架给留了个坑，讲道理/和\不是一家的么，不是很懂。</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2019/07/26/test/"/>
      <url>/2019/07/26/test/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown语法学习"><a href="#Markdown语法学习" class="headerlink" title="Markdown语法学习"></a>Markdown语法学习</h1><h2 id="语法简明概述"><a href="#语法简明概述" class="headerlink" title="语法简明概述"></a>语法简明概述</h2><p>1.分段 两个回车<br>2.换行 两个空格 + 回车<br>3.标题 #~######，#号的个数表示几级标题，即表示一级标题到六级标题<br>4.强调 <strong>加粗</strong> ， <strong>加粗</strong> ， <em>斜体</em><br>5.引用 &gt; 注意后面紧跟个空格<br>6.表格 - 和 | 分割行和列 ， : 控制对其方式<br>7.代码块 三个点<br>8.链接 <a href="https://www.fanfff.cn/" target="_blank" rel="noopener">样例</a><br>9.图片 <img src="/images/pasted-1.png" alt="wtf"><br>地址可以是本地路经，也可以是网络地址<br>10.列表 * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格  </p><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 一级标题</span></code></pre><p>不好意思没七级标题</p><h2 id="内容强调"><a href="#内容强调" class="headerlink" title="内容强调"></a>内容强调</h2><p>加粗、斜体  </p><h3 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h3><pre class=" language-bash"><code class="language-bash">**加粗**</code></pre><p><strong>加粗</strong>  </p><pre class=" language-bash"><code class="language-bash">*斜体*</code></pre><p>字体 <em>斜体</em>   </p><pre class=" language-bash"><code class="language-bash">***加粗并斜体***</code></pre><p>字体 <strong><em>加粗并斜体</em></strong>   </p><h3 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h3><pre class=" language-bash"><code class="language-bash">__加粗__</code></pre><p>字体 <strong>加粗</strong>  </p><pre class=" language-bash"><code class="language-bash">_斜体_</code></pre><p>字体 <em>斜体</em>  </p><pre class=" language-bash"><code class="language-bash">___加粗并斜体___</code></pre><p>字体 <strong><em>加粗并斜体</em></strong>   </p><h3 id="组合写法"><a href="#组合写法" class="headerlink" title="组合写法"></a>组合写法</h3><pre class=" language-bash"><code class="language-bash">*__加粗并斜体__*</code></pre><p><em><strong>加粗并斜体</strong></em>   </p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><pre class=" language-bash"><code class="language-bash">这样来 ~~删除一段文本~~</code></pre><p>这样来 <del>删除一段文本</del></p><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><pre class=" language-bash"><code class="language-bash">使用<span class="token operator">&lt;</span>code<span class="token operator">></span>\<span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>/code<span class="token operator">></span>来强调字符   比如<span class="token variable">`</span></span>突出背景色`来显示强调效果  </code></pre><p>使用<code>`</code>来强调字符<br>比如<code>突出背景色</code>来显示强调效果   </p><h2 id="引用显示"><a href="#引用显示" class="headerlink" title="引用显示"></a>引用显示</h2><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格语法：</p><pre class=" language-bash"><code class="language-bash">列1   <span class="token operator">|</span> 列2 <span class="token operator">|</span> 列3 ----- <span class="token operator">|</span> --- <span class="token operator">|</span> ---- 第1行 <span class="token operator">|</span> 12  <span class="token operator">|</span> 13  第2行 <span class="token operator">|</span> 22  <span class="token operator">|</span> 23  第3行 <span class="token operator">|</span> 32  <span class="token operator">|</span> 33  </code></pre><table><thead><tr><th>列1</th><th>列2</th><th>列3</th></tr></thead><tbody><tr><td>第1行</td><td>12</td><td>13</td></tr><tr><td>第2行</td><td>22</td><td>23</td></tr><tr><td>第3行</td><td>32</td><td>33</td></tr></tbody></table><p>可以使用冒号来定义对齐方式：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">|</span> 左对齐    <span class="token operator">|</span>  右对齐 <span class="token operator">|</span> 居中 <span class="token operator">|</span><span class="token operator">|</span> :-------- <span class="token operator">|</span> -------:<span class="token operator">|</span> :--: <span class="token operator">|</span><span class="token operator">|</span> Computer  <span class="token operator">|</span> 5000 元 <span class="token operator">|</span>  1台 <span class="token operator">|</span><span class="token operator">|</span> Phone     <span class="token operator">|</span> 1999 元 <span class="token operator">|</span>  1部 <span class="token operator">|</span></code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中</th></tr></thead><tbody><tr><td align="left">Computer</td><td align="right">5000 元</td><td align="center">1台</td></tr><tr><td align="left">Phone</td><td align="right">1999 元</td><td align="center">1部</td></tr></tbody></table><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码块语法遵循标准 markdown 代码，使用三个点开始，三个点结束 例如：</p><pre class=" language-bash"><code class="language-bash">```Python<span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>print 'Hello World<span class="token operator">!</span> ```</code></pre><h2 id="链接插入"><a href="#链接插入" class="headerlink" title="链接插入"></a>链接插入</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>首页<span class="token punctuation">]</span><span class="token punctuation">(</span>http://fanfff.cn<span class="token punctuation">)</span><span class="token punctuation">[</span>我的信息<span class="token punctuation">]</span><span class="token punctuation">(</span>/about/<span class="token punctuation">)</span></code></pre><p><a href="http://fanfff.cn" target="_blank" rel="noopener">首页</a><br><a href="/about/">我的信息</a>  </p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表</p><pre class=" language-bash"><code class="language-bash">* *列表展示* *列表展示 * *列表展示+ +列表展示+ +列表展示 + +列表展示- -列表展示- -列表展示 - -列表展示</code></pre><ul><li>*列表展示</li><li>*列表展示<ul><li>*列表展示</li></ul></li></ul><ul><li>+列表展示</li><li>+列表展示<ul><li>+列表展示</li></ul></li></ul><ul><li>-列表展示</li><li>-列表展示<ul><li>-列表展示 </li></ul></li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>这种方式不用手动设置序号，自动生成列表序列</p><pre class=" language-bash"><code class="language-bash">1. **我是一级序列** 1. **我是一级序列** 1. **我是一级序列**  1. *我是二级序列*  1. *我是二级序列*  1. *我是二级序列* 1. **我是一级序列** 1. **我是一级序列**  1. *我是二级序列*  1. *我是二级序列*   1. 还是二级序列，没有三级序列 </code></pre><ol><li><strong>我是一级序列</strong> </li><li><strong>我是一级序列</strong> </li><li><strong>我是一级序列</strong> <ol><li><em>我是二级序列</em> </li><li><em>我是二级序列</em> </li><li><em>我是二级序列</em> </li></ol></li><li><strong>我是一级序列</strong> </li><li><strong>我是一级序列</strong> <ol><li><em>我是二级序列</em> </li><li><em>我是二级序列</em> </li><li>还是二级序列，没有三级序列   </li></ol></li></ol><h2 id="链接自动检测"><a href="#链接自动检测" class="headerlink" title="链接自动检测"></a>链接自动检测</h2><pre class=" language-bash"><code class="language-bash">首页:http://fanfff.cn我的信息:http://fanfff.cn/about/</code></pre><p>首页:<a href="http://fanfff.cn" target="_blank" rel="noopener">http://fanfff.cn</a><br>我的信息:<a href="http://fanfff.cn/about/" target="_blank" rel="noopener">http://fanfff.cn/about/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello-world!</title>
      <link href="/2019/07/25/hello-world/"/>
      <url>/2019/07/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>突发奇想弄一个自己的博客，用来平常扯犊子说批话用</p><p><a href="https://blog.csdn.net/qq_36344542" target="_blank" rel="noopener">旧站连接</a></p><p><img src="/images/pasted-2.png" alt="We want say"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
